<?xml version="1.0"?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc docName="draft-ietf-isis-yang-isis-cfg-36" ipr="trust200902" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en">
  <front>
    <title abbrev="isis-cfg">YANG Data Model for IS-IS Protocol</title>
    <author fullname="Stephane Litkowski" initials="S" surname="Litkowski">
      <organization>Orange</organization>
      <address>
        <email>stephane.litkowski@orange.com</email>
      </address>
    </author>
        <author fullname="Derek Yeung" initials="D" surname="Yeung">
      <organization>Arrcus, Inc</organization>
      <address>
        <email>derek@arrcus.com</email>
      </address>
    </author>
        <author fullname="Acee Lindem" initials="A" surname="Lindem">
      <organization>Cisco Systems</organization>
      <address>
        <email>acee@cisco.com</email>
      </address>
    </author>
        <author fullname="Jeffrey Zhang" initials="J" surname="Zhang">
      <organization>Juniper Networks</organization>
      <address>
        <email>zzhang@juniper.net</email>
      </address>
    </author>
        <author fullname="Ladislav Lhotka" initials="L" surname="Lhotka">
      <organization>CZ.NIC</organization>
      <address>
        <email>lhotka@nic.cz</email>
      </address>
    </author>
    <date day="28" month="August" year="2019"/>
    <area/>
    <workgroup>IS-IS Working Group</workgroup>

    <abstract>
      <t>This document defines a YANG data model that can be used to
      configure and manage IS-IS protocol on network elements.
          </t>
    </abstract>
    <note title="Requirements Language">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 <xref target="RFC2119" pageno="false" format="default"/> <xref target="RFC8174" pageno="false" format="default"/> when, and only when, they appear in all
   capitals, as shown here.</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" title="Introduction" toc="default">
      <t>
      This document defines a YANG <xref target="RFC7950" pageno="false" format="default"/> data model for IS-IS routing
      protocol.</t>
      <t>The data model covers configuration of an IS-IS routing
      protocol instance as well as operational states.</t>
      <t>A simplified tree representation of the data model is
        presented in <xref target="design" pageno="false" format="default"/>. 
        Tree diagrams used in this document follow the notation defined in <xref target="RFC8340" pageno="false" format="default"/>.</t>        
    <t>The module is designed as per NMDA (Network Management Datastore Architecture) <xref target="RFC8342" pageno="false" format="default"/>.</t>
    </section>
    <section anchor="design" title="Design of the Data Model" toc="default">
      <t>The IS-IS YANG module augments the
      "control-plane-protocol" list in ietf-routing module <xref target="RFC8349" pageno="false" format="default"/> with specific
      IS-IS parameters.</t>
      <t>The figure below describes the overall structure of the isis
      YANG module:</t>

      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
      <artwork><![CDATA[
module: ietf-isis
  augment /rt:routing/rt:ribs/rt:rib/rt:routes/rt:route:
    +--ro metric?       uint32
    +--ro tag*          uint64
    +--ro route-type?   enumeration
  augment /if:interfaces/if:interface:
    +--rw clns-mtu?   uint16 {osi-interface}?
  augment 
    | /rt:routing/rt:control-plane-protocols/rt:control-plane-protocol:
    +--rw isis
       +--rw enable?                   boolean {admin-control}?
       +--rw level-type?               level
       +--rw system-id?                system-id
       +--rw maximum-area-addresses?   uint8 {maximum-area-addresses}?
       +--rw area-address*             area-address
       +--rw lsp-mtu?                  uint16
       +--rw lsp-lifetime?             uint16
       +--rw lsp-refresh?            
       |                   rt-types:timer-value-seconds16 {lsp-refresh}?
       +--rw poi-tlv?                  boolean {poi-tlv}?
       +--rw graceful-restart {graceful-restart}?
       |  +--rw enable?             boolean
       |  +--rw restart-interval?   rt-types:timer-value-seconds16
       |  +--rw helper-enable?      boolean
       +--rw nsr {nsr}?
       |  +--rw enable?   boolean
       +--rw node-tags {node-tag}?
       |  +--rw node-tag* [tag]
       |        ...
       +--rw metric-type
       |  +--rw value?     enumeration
       |  +--rw level-1
       |  |     ...
       |  +--rw level-2
       |        ...
       +--rw default-metric
       |  +--rw value?     wide-metric
       |  +--rw level-1
       |  |     ...
       |  +--rw level-2
       |        ...
       +--rw auto-cost {auto-cost}?
       |  +--rw enable?                boolean
       |  +--rw reference-bandwidth?   uint32
       +--rw authentication
       |  +--rw (authentication-type)?
       |  |     ...
       |  +--rw level-1
       |  |     ...
       |  +--rw level-2
       |        ...
       +--rw address-families {nlpid-control}?
       |  +--rw address-family-list* [address-family]
       |        ...
       +--rw mpls
       |  +--rw te-rid {te-rid}?
       |  |     ...
       |  +--rw ldp
       |        ...
       +--rw spf-control
       |  +--rw paths?            uint16 {max-ecmp}?
       |  +--rw ietf-spf-delay {ietf-spf-delay}?
       |        ...
       +--rw fast-reroute {fast-reroute}?
       |  +--rw lfa {lfa}?
       +--rw preference
       |  +--rw (granularity)?
       |        ...
       +--rw overload
       |  +--rw status?   boolean
       +--rw overload-max-metric {overload-max-metric}?
       |  +--rw timeout?   rt-types:timer-value-seconds16
       +--ro spf-log
       |  +--ro event* [id]
       |        ...
       +--ro lsp-log
       |  +--ro event* [id]
       |        ...
       +--ro hostnames
       |  +--ro hostname* [system-id]
       |        ...
       +--ro database
       |  +--ro levels* [level]
       |        ...
       +--ro local-rib
       |  +--ro route* [prefix]
       |        ...
       +--ro system-counters
       |  +--ro level* [level]
       |        ...
       +--ro protected-routes
       |  +--ro address-family-stats* [address-family prefix alternate]
       |        ...
       +--ro unprotected-routes
       |  +--ro address-family-stats* [address-family prefix]
       |        ...
       +--ro protection-statistics* [frr-protection-method]
       |  +--ro frr-protection-method    identityref
       |  +--ro address-family-stats* [address-family]
       |        ...
       +--rw discontinuity-time?       yang:date-and-time
       +--rw topologies {multi-topology}?
       |  +--rw topology* [name]
       |        ...
       +--rw interfaces
          +--rw interface* [name]
                ...

  rpcs:
    +---x clear-adjacency
    |  +---w input
    |     +---w routing-protocol-instance-name    
    |  ->/rt:routing/control-plane-protocols/control-plane-protocol/name
    |     +---w level?                            level
    |     +---w interface?                        if:interface-ref
    +---x clear-database
       +---w input
          +---w routing-protocol-instance-name    
      -> /rt:routing/control-plane-protocols/control-plane-protocol/name
          +---w level?                            level

  notifications:
    +---n database-overload
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro overload?                enumeration
    +---n lsp-too-large
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro pdu-size?                uint32
    |  +--ro lsp-id?                  lsp-id
    +---n if-state-change
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro state?                   if-state-type
    +---n corrupted-lsp-detected
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro lsp-id?                  lsp-id
    +---n attempt-to-exceed-max-sequence
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro lsp-id?                  lsp-id
    +---n id-len-mismatch
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro pdu-field-len?           uint8
    |  +--ro raw-pdu?                 binary
    +---n max-area-addresses-mismatch
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro max-area-addresses?      uint8
    |  +--ro raw-pdu?                 binary
    +---n own-lsp-purge
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro lsp-id?                  lsp-id
    +---n sequence-number-skipped
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro lsp-id?                  lsp-id
    +---n authentication-type-failure
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro raw-pdu?                 binary
    +---n authentication-failure
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro raw-pdu?                 binary
    +---n version-skew
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro protocol-version?        uint8
    |  +--ro raw-pdu?                 binary
    +---n area-mismatch
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro raw-pdu?                 binary
    +---n rejected-adjacency
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro raw-pdu?                 binary
    |  +--ro reason?                  string
    +---n protocols-supported-mismatch
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro raw-pdu?                 binary
    |  +--ro protocols*               uint8
    +---n lsp-error-detected
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro lsp-id?                  lsp-id
    |  +--ro raw-pdu?                 binary
    |  +--ro error-offset?            uint32
    |  +--ro tlv-type?                uint8
    +---n adjacency-state-change
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro neighbor?                string
    |  +--ro neighbor-system-id?      system-id
    |  +--ro state?                   adj-state-type
    |  +--ro reason?                  string
    +---n lsp-received
    |  +--ro routing-protocol-name?
    | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    |  +--ro isis-level?              level
    |  +--ro interface-name?          if:interface-ref
    |  +--ro interface-level?         level
    |  +--ro extended-circuit-id?     extended-circuit-id
    |  +--ro lsp-id?                  lsp-id
    |  +--ro sequence?                uint32
    |  +--ro received-timestamp?      yang:timestamp
    |  +--ro neighbor-system-id?      system-id
    +---n lsp-generation
       +--ro routing-protocol-name?
      -> /rt:routing/control-plane-protocols/control-plane-protocol/name
       +--ro isis-level?              level
       +--ro lsp-id?                  lsp-id
       +--ro sequence?                uint32
       +--ro send-timestamp?          yang:timestamp
   ]]></artwork>

      </figure>

      <section anchor="yang-isis-global" title="IS-IS Configuration" toc="default">
        <t>The IS-IS configuration is divided in:
        <list style="symbols">
          <t>Global parameters.</t>
          <t>Per interface configuration (see <xref target="yang-interface" pageno="false" format="default"/>).</t>
        </list></t>
                <t>Additional modules may be created to support
                any additional parameters. These additional modules MUST augment the ietf-isis module.</t>
                <t>The model implements features, thus some of the configuration statement becomes optional.
                As an example, the ability to control the administrative state of a particular IS-IS instance is optional.
                By advertising the feature "admin-control", a device communicates to the client that it supports the ability to shutdown a particular IS-IS instance.</t>
                <t>
                The global configuration contains usual IS-IS parameters such as lsp-mtu, lsp-lifetime, lsp-refresh, default-metric...
                </t>
      </section>

      <section anchor="yang-multitopology" title="Multitopology Parameters" toc="default">
                <t>The model supports multitopology (MT) IS-IS as defined in <xref target="RFC5120" pageno="false" format="default"/>.</t>
           <t>The "topologies" container is used to enable support of MT
        extensions.</t>
                <t>The "name" used in the topology list should refer to an existing RIB of the device.</t>
                <t>Some specific parameters can be defined on a per topology basis
                both at global level and at interface level: for example, an interface metric can be defined per topology.</t>
                <t>Multiple address families (like IPv4 or IPv6) can also be activated within the default topology. 
                This can be achieved using the address-families container (requiring "nlpid-control" feature to be advertised).</t>
                
      </section>

      <section anchor="yang-level" title="Per-Level Parameters" toc="default">
        <t>Some parameters allow a per level configuration. In this case, 
                the parameter is modeled as a container with three configuration locations:
                <list style="symbols">
                <t>a top-level container: corresponds to level-1-2, so the configuration applies to both levels.</t>
                <t>a level-1 container: corresponds to level-1 specific parameters.</t>
                <t>a level-2 container: corresponds to level-2 specific parameters.</t>
                </list>
                </t>
                <figure title="" suppress-title="false" align="left" alt="" width="" height="">
                <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
            +--rw priority
            |  +--rw value?     uint8
            |  +--rw level-1
            |  |  +--rw value?   uint8
            |  +--rw level-2
            |     +--rw value?   uint8
                </artwork>
                </figure>
                <t>Example:</t>
                <figure title="" suppress-title="false" align="left" alt="" width="" height="">
                <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
        &lt;priority&gt;
            &lt;value&gt;250&lt;/value&gt;
            &lt;level-1&gt;
                &lt;value&gt;100&lt;/value&gt;
            &lt;/level-1&gt;
            &lt;level-2&gt;
                &lt;value&gt;200&lt;/value&gt;
            &lt;/level-2&gt;
        &lt;/priority&gt;
                </artwork>
                </figure>
                <t>
                An implementation MUST prefer a level specific parameter over a level-all parameter. 
                As example, if the priority is 100 for the level-1, 200 for the level-2 and 250 for the top-level configuration, the implementation should use 100 for the level-1 and 200 for the level-2.
                </t>
                <t>
                Some parameters like "overload bit" and "route preference" are not modeled to support a per level configuration. If an implementation supports per level configuration for such parameter,
                this implementation MUST augment the current model by adding both level-1 and level-2 containers and MUST reuse existing configuration groupings.
                </t>
                
                <t>Example of augmentation:</t>
                <figure title="" suppress-title="false" align="left" alt="" width="" height="">
                <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
augment "/rt:routing/" +
        "rt:control-plane-protocols/rt:control-plane-protocol"+
        "/isis:isis/isis:overload" {
        when "rt:type = 'isis:isis'" {
          description
           "This augment IS-IS routing protocol when used";
        }
        description
          "This augments IS-IS overload configuration
           with per level configuration.";
        
        container level-1 {
          uses isis:overload-global-cfg;
          description
            "Level 1 configuration.";
        }
        container level-2 {
          uses isis:overload-global-cfg;
          description
            "Level 2 configuration.";
        }
}
                </artwork>
                </figure>
                <t>
                If an implementation does not support per level configuration for a parameter modeled with per level configuration, the implementation should advertise a deviation to announce the non-support of the level-1 and level-2 containers.
                </t>
                <t>
                Finally, if an implementation supports per level configuration but does not support the level-1-2 configuration, it SHOULD also advertise a deviation.
                </t>
      </section>

      <section anchor="yang-interface" title="Per-Interface Parameters" toc="default">
        <t>The per-interface section of the IS-IS instance describes
        the interface specific parameters.</t>
                <t>The interface is modeled as a reference to an existing interface defined in the "ietf-interfaces" YANG model (<xref target="RFC8343" pageno="false" format="default"/>.</t>
        <t>Each interface has some interface-specific parameters that may have
                a different per level value as described in previous section.
                An interface-specific parameter MUST be preferred over an IS-IS global
        parameter.</t>
                <t>Some parameters like hello-padding are defined as containers
                to allow easy extension by vendor specific modules.</t>

        <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork><![CDATA[
    +--rw interfaces
       +--rw interface* [name]
          +--rw name                       if:interface-ref
          +--rw enable?                    boolean {admin-control}?
          +--rw level-type?                level
          +--rw lsp-pacing-interval?       
          |                        rt-types:timer-value-milliseconds
          +--rw lsp-retransmit-interval?
          |                        rt-types:timer-value-seconds16
          +--rw passive?                   boolean
          +--rw csnp-interval?
          |                        rt-types:timer-value-seconds16
          +--rw hello-padding
          |  +--rw enable?   boolean
          +--rw mesh-group-enable?         mesh-group-state
          +--rw mesh-group?                uint8
          +--rw interface-type?            interface-type
          +--rw tag*                       uint32 {prefix-tag}?
          +--rw tag64*                     uint64 {prefix-tag64}?
          +--rw node-flag?                 boolean {node-flag}?
          +--rw hello-authentication
          |  +--rw (authentication-type)?
          |  |  +--:(key-chain) {key-chain}?
          |  |  |  +--rw key-chain?          key-chain:key-chain-ref
          |  |  +--:(password)
          |  |     +--rw key?                string
          |  |     +--rw crypto-algorithm?   identityref
          |  +--rw level-1
          |  |  +--rw (authentication-type)?
          |  |     +--:(key-chain) {key-chain}?
          |  |     |  +--rw key-chain?       key-chain:key-chain-ref
          |  |     +--:(password)
          |  |        +--rw key?                string
          |  |        +--rw crypto-algorithm?   identityref
          |  +--rw level-2
          |     +--rw (authentication-type)?
          |        +--:(key-chain) {key-chain}?
          |        |  +--rw key-chain?       key-chain:key-chain-ref
          |        +--:(password)
          |           +--rw key?                string
          |           +--rw crypto-algorithm?   identityref
          +--rw hello-interval
          |  +--rw value?     rt-types:timer-value-seconds16
          |  +--rw level-1
          |  |  +--rw value?   rt-types:timer-value-seconds16
          |  +--rw level-2
          |     +--rw value?   rt-types:timer-value-seconds16
          +--rw hello-multiplier
          |  +--rw value?     uint16
          |  +--rw level-1
          |  |  +--rw value?   uint16
          |  +--rw level-2
          |     +--rw value?   uint16
          +--rw priority
          |  +--rw value?     uint8
          |  +--rw level-1
          |  |  +--rw value?   uint8
          |  +--rw level-2
          |     +--rw value?   uint8
          +--rw metric
          |  +--rw value?     wide-metric
          |  +--rw level-1
          |  |  +--rw value?   wide-metric
          |  +--rw level-2
          |     +--rw value?   wide-metric
          +--rw bfd {bfd}?
          |  +--rw enable?                           boolean
          |  +--rw local-multiplier?                 multiplier
          |  +--rw (interval-config-type)?
          |     +--:(tx-rx-intervals)
          |     |  +--rw desired-min-tx-interval?    uint32
          |     |  +--rw required-min-rx-interval?   uint32
          |     +--:(single-interval) {single-minimum-interval}?
          |        +--rw min-interval?               uint32
          +--rw address-families {nlpid-control}?
          |  +--rw address-family-list* [address-family]
          |     +--rw address-family    iana-rt-types:address-family
          +--rw mpls
          |  +--rw ldp
          |     +--rw igp-sync?   boolean {ldp-igp-sync}?
          +--rw fast-reroute {fast-reroute}?
          |  +--rw lfa {lfa}?
          |     +--rw candidate-enable?   boolean
          |     +--rw enable?             boolean
          |     +--rw remote-lfa {remote-lfa}?
          |     |  +--rw enable?   boolean
          |     +--rw level-1
          |     |  +--rw candidate-enable?   boolean
          |     |  +--rw enable?             boolean
          |     |  +--rw remote-lfa {remote-lfa}?
          |     |     +--rw enable?   boolean
          |     +--rw level-2
          |        +--rw candidate-enable?   boolean
          |        +--rw enable?             boolean
          |        +--rw remote-lfa {remote-lfa}?
          |           +--rw enable?   boolean
          +--ro adjacencies
          |  +--ro adjacency* []
          |     +--ro neighbor-sys-type?            level
          |     +--ro neighbor-sysid?               system-id
          |     +--ro neighbor-extended-circuit-id?
          |     |                         extended-circuit-id
          |     +--ro neighbor-snpa?                snpa
          |     +--ro usage?                        level
          |     +--ro hold-timer?
          |                         rt-types:timer-value-seconds16
          |     +--ro neighbor-priority?              uint8
          |     +--ro lastuptime?                     yang:timestamp
          |     +--ro state?                          adj-state-type
          +--ro event-counters
          |  +--ro adjacency-changes?             uint32
          |  +--ro adjacency-number?              uint32
          |  +--ro init-fails?                    uint32
          |  +--ro adjacency-rejects?             uint32
          |  +--ro id-len-mismatch?               uint32
          |  +--ro max-area-addresses-mismatch?   uint32
          |  +--ro authentication-type-fails?     uint32
          |  +--ro authentication-fails?          uint32
          |  +--ro lan-dis-changes?               uint32
          +--ro packet-counters
          |  +--ro level* [level]
          |     +--ro level      level-number
          |     +--ro iih
          |     |  +--ro in?    uint32
          |     |  +--ro out?   uint32
          |     +--ro ish
          |     |  +--ro in?    uint32
          |     |  +--ro out?   uint32
          |     +--ro esh
          |     |  +--ro in?    uint32
          |     |  +--ro out?   uint32
          |     +--ro lsp
          |     |  +--ro in?    uint32
          |     |  +--ro out?   uint32
          |     +--ro psnp
          |     |  +--ro in?    uint32
          |     |  +--ro out?   uint32
          |     +--ro csnp
          |     |  +--ro in?    uint32
          |     |  +--ro out?   uint32
          |     +--ro unknown
          |        +--ro in?   uint32
          +--rw discontinuity-time?       yang:date-and-time
          +--rw topologies {multi-topology}?
             +--rw topology* [name]
                +--rw name      
                |    -> ../../../../../../../../rt:ribs/rib/name
                +--rw metric
                   +--rw value?     wide-metric
                   +--rw level-1
                   |  +--rw value?   wide-metric
                   +--rw level-2
                      +--rw value?   wide-metric

rpcs:
 +---x clear-adjacency
 |  +---w input
 |     +---w routing-protocol-instance-name    
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |     +---w level?                            level
 |     +---w interface?                        if:interface-ref
 +---x clear-database
    +---w input
       +---w routing-protocol-instance-name
   -> /rt:routing/control-plane-protocols/control-plane-protocol/name
       +---w level?                            level

notifications:
 +---n database-overload
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro overload?                enumeration
 +---n lsp-too-large
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro pdu-size?                uint32
 |  +--ro lsp-id?                  lsp-id
 +---n if-state-change
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro state?                   if-state-type
 +---n corrupted-lsp-detected
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro lsp-id?                  lsp-id
 +---n attempt-to-exceed-max-sequence
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro lsp-id?                  lsp-id
 +---n id-len-mismatch
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro pdu-field-len?           uint8
 |  +--ro raw-pdu?                 binary
 +---n max-area-addresses-mismatch
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro max-area-addresses?      uint8
 |  +--ro raw-pdu?                 binary
 +---n own-lsp-purge
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro lsp-id?                  lsp-id
 +---n sequence-number-skipped
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro lsp-id?                  lsp-id
 +---n authentication-type-failure
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro raw-pdu?                 binary
 +---n authentication-failure
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro raw-pdu?                 binary
 +---n version-skew
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro protocol-version?        uint8
 |  +--ro raw-pdu?                 binary
 +---n area-mismatch
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro raw-pdu?                 binary
 +---n rejected-adjacency
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro raw-pdu?                 binary
 |  +--ro reason?                  string
 +---n protocols-supported-mismatch
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro raw-pdu?                 binary
 |  +--ro protocols*               uint8
 +---n lsp-error-detected
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro lsp-id?                  lsp-id
 |  +--ro raw-pdu?                 binary
 |  +--ro error-offset?            uint32
 |  +--ro tlv-type?                uint8
 +---n adjacency-state-change
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro neighbor?                string
 |  +--ro neighbor-system-id?      system-id
 |  +--ro state?                   adj-state-type
 |  +--ro reason?                  string
 +---n lsp-received
 |  +--ro routing-protocol-name?
 | -> /rt:routing/control-plane-protocols/control-plane-protocol/name
 |  +--ro isis-level?              level
 |  +--ro interface-name?          if:interface-ref
 |  +--ro interface-level?         level
 |  +--ro extended-circuit-id?     extended-circuit-id
 |  +--ro lsp-id?                  lsp-id
 |  +--ro sequence?                uint32
 |  +--ro received-timestamp?      yang:timestamp
 |  +--ro neighbor-system-id?      system-id
 +---n lsp-generation
    +--ro routing-protocol-name?
   -> /rt:routing/control-plane-protocols/control-plane-protocol/name
    +--ro isis-level?              level
    +--ro lsp-id?                  lsp-id
    +--ro sequence?                uint32
    +--ro send-timestamp?          yang:timestamp
   ]]></artwork>

        </figure>

      </section>
           <section anchor="yang-authentication" title="Authentication Parameters" toc="default">
           <t>
           The module enables authentication configuration through the IETF key-chain module <xref target="RFC8177" pageno="false" format="default"/>.
           The IS-IS module imports the "ietf-key-chain" module and reuses some groupings to allow global and per interface configuration of authentication.
           If a global authentication is configured, an implementation SHOULD authenticate PSNPs (Partial Sequence Number Packets), CSNPs (Complete Sequence Number Packets) and LSPs (Link State Packets) with the authentication parameters supplied.
           The authentication of HELLO PDUs (Protocol Data Units) can be activated on a per interface basis.
           </t>
           </section>
           <section anchor="yang-igp-ldp" title="IGP/LDP synchronization" toc="default">
           <t>
           <xref target="RFC5443" pageno="false" format="default"/> defines a mechanism where IGP (Interior Gateway Protocol) needs to be synchronized with LDP (Label Distribution Protocol).
           An "ldp-igp-sync" feature has been defined in the model to support this mechanism.
           The "mpls/ldp/igp-sync" leaf under "interface" allows activation of the mechanism on a per interface basis.
           The "mpls/ldp/igp-sync" container in the global configuration is empty on purpose and is not required for the activation. 
           The goal of this empty container is to allow easy augmentation with additional parameters like timers for example.
           </t>
           </section>
           <section anchor="yang-iso" title="ISO parameters" toc="default">
           <t>As IS-IS protocol is based on ISO protocol suite, some ISO parameters may be required.</t>
           <t>This module augments interface configuration model to support ISO configuration parameters.</t>
           <t>The clns-mtu can be defined under the interface.</t>
          </section>
          <section anchor="yang-frr" title="IP FRR" toc="default">
          <t>
          This YANG module supports LFA (Loop Free Alternates) <xref target="RFC5286" pageno="false" format="default"/> and remote LFA <xref target="RFC7490" pageno="false" format="default"/> as IP FRR techniques.
          The "fast-reroute" container may be augmented by other models to support other IPFRR flavors (MRT, TILFA ...).
          </t>
          <t>
          The current version of the model supports activation of LFA and remote LFA at interface only.
          The global "lfa" container is present but kept empty to allow augmentation with vendor specific properties like policies.
          </t>
          <t>Remote LFA is considered as a child of LFA. Remote LFA cannot be enabled if LFA is not enabled.</t>
          <t>The "candidate-enable" allows to mark an interface to be used as a backup.</t>
          </section>
          
          
      <section anchor="yang-op" title="Operational States" toc="default">
        <t>Operational states are provided in the module in various places:
        <list style="symbols">
                <t>system-counters: provides statistical informations about
                the global system.</t>
                <t>interface : provides configuration state informations for
                each interface.</t>
          <t>adjacencies: provides state informations about current
          IS-IS adjacencies.</t>
          <t>spf-log: provides informations about SPF events on the
          node. This SHOULD be implemented as a wrapping buffer.</t>
          <t>lsp-log: provides informations about LSP events on the
          node (reception of an LSP or modification of local LSP).
          This SHOULD be implemented as a wrapping buffer and an implementation MAY decide to log refresh LSPs or not.</t>
          <t>local-rib: provides the IS-IS internal routing table view.</t>
          <t>database: provides details on the current LSDB.</t>
          <t>hostnames: provides informations about system-id to
          hostname mappings <xref target="RFC5301" pageno="false" format="default"/>.</t>
          <t>fast-reroute: provides informations about IP FRR.</t>
        </list></t>
      </section>

    </section>

    <section anchor="RPC" title="RPC Operations" toc="default">
      <t>The "ietf-isis" module defines two RPC operations:
      <list style="symbols">
        <t>clear-database: reset the content of a particular IS-IS
        database and restart database synchronization with the
        neighbors.</t>
        <t>clear-adjacency: restart a particular set of IS-IS
        adjacencies.</t>
      </list></t>

      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
          <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
</artwork>

      </figure>

    </section>

    <section anchor="notif" title="Notifications" toc="default">
      <t>The "ietf-isis" module introduces some notifications :
          <list>
          <t>database-overload: raised when overload condition is changed.</t>
          <t>lsp-too-large: raised when the system tries to propagate a PDU that is too large.</t>
          <t>if-state-change: raised when the state of an interface changes.</t>
          <t>corrupted-lsp-detected: raised when the system finds
                   that an LSP that was stored in memory has
                   become corrupted.</t>
                <t>attempt-to-exceed-max-sequence: This notification is sent when the system
                  wraps the 32-bit sequence counter of an LSP.</t>
                <t>id-len-mismatch: This notification is sent when we receive a PDU
                  with a different value for the System ID length.</t>
                <t>max-area-addresses-mismatch: This notification is sent when we receive a PDU
                  with a different value for the Maximum Area Addresses.</t>
                <t>own-lsp-purge: This notification is sent when the system
                  receives a PDU with its own system ID and zero age.</t>
                <t>sequence-number-skipped: This notification is sent when the system
                  receives a PDU with its own system ID and 
                  different contents. The system has to reissue
                  the LSP with a higher sequence number.</t>
                <t>authentication-type-failure: This notification is sent when the system
                  receives a PDU with the wrong authentication type
                  field.</t>
                <t>authentication-failure: This notification is sent when the system
                  receives a PDU with the wrong authentication 
                  information.</t>
                <t>version-skew: This notification is sent when the system
                  receives a PDU with a different protocol version
                  number.</t>
                <t>area-mismatch: This notification is sent when the system
                  receives a Hello PDU from an IS that does
                  not share any area address.</t>
                <t>rejected-adjacency: This notification is sent when the system
                  receives a Hello PDU from an IS but does not
                  establish an adjacency for some reason.</t>
                <t>protocols-supported-mismatch: This notification is sent when the system
                  receives a non-pseudonode LSP that has no matching
                  protocol supported.</t>
                <t>lsp-error-detected: This notification is sent when the system
                  receives an LSP with a parse error.</t>
                <t>adjacency-state-change: This notification is sent when an IS-IS adjacency
                   moves to Up state or to Down state.</t>
                <t>lsp-received: This notification is sent when an LSP
                  is received.</t>
                <t>lsp-generation: This notification is sent when an LSP
                  is regenerated.</t>
          </list>
      </t>

      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
</artwork>

      </figure>

    </section>


    <section anchor="interaction" title="Interaction with Other YANG Modules" toc="default">
      <t>The "isis" container augments the
      "/rt:routing/rt:control-plane-protocols/control-plane-protocol"
      container of the ietf-routing <xref target="RFC8349" pageno="false" format="default"/> module by defining IS-IS specific
      parameters.</t>
          <t>The "isis" module augments
      "/if:interfaces/if:interface" defined by <xref target="RFC8343" pageno="false" format="default"/>
      with ISO specific parameters.</t>
      <t>The "isis" operational state container augments the
      "/rt:routing-state/rt:control-plane-protocols/control-plane-protocol"
      container of the ietf-routing module by defining IS-IS specific
      operational states.</t>
      <t>Some IS-IS specific routes attributes are added to route
      objects of the ietf-routing module by augmenting
      "/rt:routing-state/rt:ribs/rt:rib/rt:routes/rt:route".</t>
          <t>The modules defined in this document use some groupings from ietf-keychain <xref target="RFC8177" pageno="false" format="default"/>.</t>
      <t>The module reuses types from <xref target="RFC6991" pageno="false" format="default"/> and <xref target="RFC8294" pageno="false" format="default"/>.</t>
      <t>To support BFD for fast detection, the module relies on <xref target="I-D.ietf-bfd-yang" pageno="false" format="default"/>.</t>
    </section>

    <section anchor="isis-yang" title="IS-IS YANG Module" toc="default">
    <t>The following RFCs, drafts and external standards are not referenced in the document text
   but are referenced in the ietf-isis.yang module: <xref target="ISO-10589" pageno="false" format="default"/>, <xref target="RFC1195" pageno="false" format="default"/>, <xref target="RFC2966" pageno="false" format="default"/>, <xref target="RFC4090" pageno="false" format="default"/>,<xref target="RFC5029" pageno="false" format="default"/>, <xref target="RFC5130" pageno="false" format="default"/>, <xref target="RFC5305" pageno="false" format="default"/>, <xref target="RFC5306" pageno="false" format="default"/>, <xref target="RFC5307" pageno="false" format="default"/>, <xref target="RFC5308" pageno="false" format="default"/>, <xref target="RFC5880" pageno="false" format="default"/>, <xref target="RFC5881" pageno="false" format="default"/>, <xref target="RFC6119" pageno="false" format="default"/>, <xref target="RFC6232" pageno="false" format="default"/>, <xref target="RFC7794" pageno="false" format="default"/>, <xref target="RFC7981" pageno="false" format="default"/>, <xref target="RFC8570" pageno="false" format="default"/>, <xref target="RFC7917" pageno="false" format="default"/>, <xref target="RFC8405" pageno="false" format="default"/>.</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
      <artwork><![CDATA[
<CODE BEGINS> file "ietf-isis@2019-09-04.yang"
module ietf-isis {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-isis";

  prefix isis;

  import ietf-routing {
    prefix "rt";
    reference "RFC 8349 - A YANG Data Model for Routing
               Management (NMDA Version)";
  }

  import ietf-inet-types {
    prefix inet;
    reference "RFC 6991 - Common YANG Data Types";
  }

  import ietf-yang-types {
    prefix yang;
    reference "RFC 6991 - Common YANG Data Types";
  }

  import ietf-interfaces {
    prefix "if";
    reference "RFC 8343 - A YANG Data Model for Interface
               Management (NDMA Version)";
  }

  import ietf-key-chain {
    prefix "key-chain";
    reference "RFC 8177 - YANG Data Model for Key Chains";
  }

  import ietf-routing-types {
    prefix "rt-types";
    reference "RFC 8294 - Common YANG Data Types for the
               Routing Area";
  }

  import iana-routing-types {
    prefix "iana-rt-types";
    reference "RFC 8294 - Common YANG Data Types for the
               Routing Area";
  }

  import ietf-bfd-types {
    prefix "bfd-types";
    reference "RFC YYYY - YANG Data Model for Bidirectional
               Forwarding Detection (BFD).

-- Note to RFC Editor Please replace YYYY with published RFC
  number for draft-ietf-bfd-yang.";

  }

  organization
    "IETF LSR Working Group";

  contact
    "WG List:  <mailto:lsr@ietf.org>

    Editor:    Stephane Litkowski
          <mailto:stephane.litkowski@orange.com>

        Derek Yeung
          <mailto:derek@arrcus.com>
        Acee Lindem
          <mailto:acee@cisco.com>
        Jeffrey Zhang
          <mailto:zzhang@juniper.net>
        Ladislav Lhotka
          <mailto:llhotka@nic.cz>

    ";

  description
    "This YANG module defines the generic configuration and
      operational state for the IS-IS protocol.
      It is intended that the module
      will be extended by vendors to define vendor-specific
      IS-IS configuration parameters and policies,
      for example, route maps or route policies.

      This YANG module conforms to the Network Management
      Datastore Architecture (NDMA) as described in RFC 8242.

      Copyright (c) 2018 IETF Trust and the persons identified as
      authors of the code.  All rights reserved.

       Redistribution and use in source and binary forms, with or
       without modification, is permitted pursuant to, and subject
       to the license terms contained in, the Simplified BSD License
       set forth in Section 4.c of the IETF Trust's Legal Provisions
       Relating to IETF Documents
       (http://trustee.ietf.org/license-info).

       This version of this YANG module is part of RFC XXXX;
       see the RFC itself for full legal notices.

       The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
       'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
       'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
       are to be interpreted as described in BCP 14 [RFC2119]
       [RFC8174] when, and only when, they appear in all capitals,
       as shown here.
       ";

  revision 2019-09-04 {
    description
      "Initial revision.";
    reference "RFC XXXX";
  }

  /* Identities */

  identity isis {
    base rt:routing-protocol;
    description "Identity for the IS-IS routing protocol.";
  }

  identity lsp-log-reason {
    description "Base identity for an LSP change log reason.";
  }

  identity refresh {
    base lsp-log-reason;
    description
      "Identity used when the LSP log reason is
       a refresh LSP received.";
  }

  identity content-change {
    base lsp-log-reason;
    description
      "Identity used when the LSP log reason is
       a change in the content of the LSP.";
  }

  identity frr-protection-method {
    description
      "Base identity for a Fast Reroute protection method.";
  }
  identity frr-protection-method-lfa {
    base frr-protection-method;
    description "Loop Free Alternate as defined in RFC5286.";
  }
  identity frr-protection-method-rlfa {
    base frr-protection-method;
    description "Remote Loop Free Alternate as defined in RFC7490.";
  }
  identity frr-protection-method-rsvpte {
    base frr-protection-method;
    description "RSVP-TE as defined in RFC4090.";
  }

  identity frr-protection-available-type {
    description "Base identity for Fast Reroute protection types
                provided by an alternate path.";
  }
  identity frr-protection-available-node-type {
    base frr-protection-available-type;
    description "Node protection is provided by the alternate.";
  }
  identity frr-protection-available-link-type {
    base frr-protection-available-type;
    description "Link protection is provided by the alternate.";
  }
  identity frr-protection-available-srlg-type {
    base frr-protection-available-type;
    description "SRLG protection is provided by the alternate.";
  }
  identity frr-protection-available-downstream-type {
    base frr-protection-available-type;
    description "The alternate is downstream on the path.";
  }
  identity frr-protection-available-other-type {
    base frr-protection-available-type;
    description "The level of protection is unknown.";
  }


  identity unidirectional-link-delay-subtlv-flag {
      description "Base identity for unidirectional-link-delay
                  subTLV flags. Flags are defined in RFC8570.";
  }
  identity unidirectional-link-delay-subtlv-a-flag {
      base unidirectional-link-delay-subtlv-flag;
      description
          "The A bit represents the Anomalous (A) bit.
            The A bit is set when the measured value of
            this parameter exceeds its configured
            maximum threshold.
            The A bit is cleared when the measured value
            falls below its configured reuse threshold.
            If the A bit is clear,
            the value represents steady-state link performance.";
  }
  identity min-max-unidirectional-link-delay-subtlv-flag {
      description
        "Base identity for min-max-unidirectional-link-delay
         subTLV flags. Flags are defined in RFC8570.";
  }
  identity min-max-unidirectional-link-delay-subtlv-a-flag {
      base min-max-unidirectional-link-delay-subtlv-flag;
      description
          "The A bit represents the Anomalous (A) bit.
            The A bit is set when the measured value of
            this parameter exceeds its configured
            maximum threshold.
            The A bit is cleared when the measured value
            falls below its configured reuse threshold.
            If the A bit is clear,
            the value represents steady-state link performance.";
  }
  identity unidirectional-link-loss-subtlv-flag {
      description "Base identity for unidirectional-link-loss
                  subTLV flags. Flags are defined in RFC8570.";
  }

  identity unidirectional-link-loss-subtlv-a-flag {
      base unidirectional-link-loss-subtlv-flag;
      description
          "The A bit represents the Anomalous (A) bit.
            The A bit is set when the measured value of
            this parameter exceeds its configured
            maximum threshold.
            The A bit is cleared when the measured value
            falls below its configured reuse threshold.
            If the A bit is clear,
            the value represents steady-state link performance.";
  }
  identity tlv229-flag {
      description "Base identity for TLV229 flags. Flags are defined
                  in RFC5120.";
  }
  identity tlv229-overload-flag {
      base tlv229-flag;
      description
          "If set, the originator is overloaded,
          and must be avoided in path calculation.";
  }
  identity tlv229-attached-flag {
      base tlv229-flag;
      description
          "If set, the originator is attached to
          another area using the referred metric.";
  }
  identity router-capability-flag {
      description "Base identity for router capability flags.
        Flags are defined in RFC7981.";
  }
  identity router-capability-flooding-flag {
      base router-capability-flag;
      description
          "Quote from RFC7981: 'If the S bit is set,
           the IS-IS Router CAPABILITY
           TLV MUST be flooded across the entire routing
           domain. If the S bit is clear, the TLV MUST NOT
           be leaked between levels. This bit MUST NOT
           be altered during the TLV leaking'.";
  }
  identity router-capability-down-flag {
      base router-capability-flag;
      description
          "Quote from RFC7981: 'When the IS-IS Router CAPABILITY TLV
           is leaked from level-2 to level-1, the D bit MUST be set.
           Otherwise, this bit MUST be clear.  IS-IS Router
           capability TLVs with the D bit set MUST NOT be
           leaked from level-1 to level-2 in to prevent
           TLV looping'.";
  }

  identity lsp-flag {
      description "Base identity for LSP attributes.
                   Attributes are defined in ISO 10589";
  }
  identity lsp-partitioned-flag {
      base lsp-flag;
      description "Originator partition repair supported";
  }
  identity lsp-attached-error-metric-flag {
      base lsp-flag;
      description "Set when originator is attached to
           another area using the referred metric.";
  }
  identity lsp-attached-delay-metric-flag {
      base lsp-flag;
      description "Set when originator is attached to
           another area using the referred metric.";
  }
  identity lsp-attached-expense-metric-flag {
      base lsp-flag;
      description "Set when originator is attached to
           another area using the referred metric.";
  }
  identity lsp-attached-default-metric-flag {
      base lsp-flag;
      description "Set when originator is attached to
           another area using the referred metric.";
  }
  identity lsp-overload-flag {
      base lsp-flag;
      description
          "If set, the originator is overloaded,
           and must be avoided in path calculation.";
  }
  identity lsp-l1system-flag {
      base lsp-flag;
      description
          "Set when the Intermediate System has an L1 type.";
  }
  identity lsp-l2system-flag {
      base lsp-flag;
      description
          "Set when the Intermediate System has an L2 type.";
  }



  /* Feature definitions */

  feature osi-interface {
    description "Support of OSI specific parameters on an
                interface.";
  }
  feature poi-tlv {
    description "Support of Purge Originator Identification.";
    reference "RFC 6232 - Purge Originator Identification TLV
               for IS-IS";
  }
  feature ietf-spf-delay {
    description
      "Support for IETF SPF delay algorithm.";
    reference "RFC 8405 - SPF Back-off algorithm for link
               state IGPs";
  }
  feature bfd {
    description
      "Support for BFD detection of IS-IS neighbor reachability.";
    reference "RFC 5880 - Bidirectional Forwarding Detection (BFD)
               RFC 5881 - Bidirectional Forwarding Detection
               (BFD) for IPv4 and IPv6 (Single Hop)";
  }
  feature key-chain {
    description
      "Support of keychain for authentication.";
    reference "RFC8177 - YANG Data Model for Key Chains";
  }
  feature node-flag {
    description
      "Support for node-flag for IS-IS prefixes.";
    reference "RFC7794 - IS-IS Prefix Attributes for
               Extended IP and IPv6 Reachability";
  }
  feature node-tag {
    description
      "Support for node admin tag for IS-IS routing instances.";
    reference "RFC7917 - Advertising Node Administrative Tags
               in IS-IS";
  }
  feature ldp-igp-sync {
    description
      "LDP IGP synchronization.";
    reference "RFC5443 - LDP IGP Synchronization.";
  }
  feature fast-reroute {
    description
      "Support for IP Fast Reroute (IP-FRR).";
  }
  feature nsr {
    description
      "Non-Stop-Routing (NSR) support. The IS-IS NSR feature
          allows  a router with redundant control-plane capability
          (e.g., dual Route-Processor (RP) cards) to maintain its
          state and adjacencies during planned and unplanned
          IS-IS instance restarts. It differs from graceful-restart
          or Non-Stop Forwarding (NSF) in that no protocol signaling
          or assistance from adjacent IS-IS neighbors is required to
          recover control-plane state.";
  }
  feature lfa {
    description
      "Support for Loop-Free Alternates (LFAs).";
    reference "RFC5286 - Basic Specification of IP Fast-Reroute:
               Loop-free Alternates";
  }
  feature remote-lfa {
    description
      "Support for Remote Loop-Free Alternates (R-LFAs).";
    reference "RFC7490 - Remote Loop-Free Alternate Fast Reroute";
  }

  feature overload-max-metric {
    description
      "Support of overload by setting all links to max metric.
        In IS-IS, the overload bit is usually used to signal that
        a node cannot be used as a transit. The overload-max-metric
        feature brings a similar behavior leveraging on setting all
        the link metrics to MAX_METRIC.";
  }
  feature prefix-tag {
    description
      "Support for 32-bit prefix tags";
    reference "RFC5130 - A Policy Control Mechanism in
               IS-IS Using Administrative Tags";
  }
  feature prefix-tag64 {
    description
      "Support for 64-bit prefix tags";
    reference "RFC5130 - A Policy Control Mechanism in
               IS-IS Using Administrative Tags";
  }
  feature auto-cost {
    description
      "Calculate IS-IS interface metric according to
       reference bandwidth.";
  }

  feature te-rid {
    description
      "Traffic-Engineering Router-ID.";
    reference "RFC5305 - IS-IS Extensions for Traffic Engineering
               RFC6119 - IPv6 Traffic Engineering in IS-IS";
  }
  feature max-ecmp {
    description
      "Setting maximum number of ECMP paths.";
  }
  feature multi-topology {
    description
      "Support for Multiple-Topology Routing (MTR).";
    reference "RFC5120 - M-IS-IS: Multi Topology Routing in IS-IS";
  }
  feature nlpid-control {
    description
      "This feature controls the advertisement
       of support NLPID within IS-IS configuration.";
  }
  feature graceful-restart {
    description
      "IS-IS Graceful restart support.";
    reference "RFC5306 - Restart Signaling in IS-IS";
  }

  feature lsp-refresh {
    description
      "Configuration of LSP refresh interval.";
  }

  feature maximum-area-addresses {
    description
      "Support of maximum-area-addresses config.";
  }

  feature admin-control {
    description
      "Administrative control of the protocol state.";
  }

  /* Type definitions */

  typedef circuit-id {
    type uint8;
    description
      "This type defines the circuit ID
       associated with an interface.";
  }

  typedef extended-circuit-id {
    type uint32;
    description
      "This type defines the extended circuit ID
       associated with an interface.";
  }

  typedef interface-type {
    type enumeration {
      enum broadcast {
        description
          "Broadcast interface type.";
      }
      enum point-to-point {
        description
          "Point-to-point interface type.";
      }
    }
    description
      "This type defines the type of adjacency
       to be established on the interface.
       The interface-type determines the type
       of hello message that is used.";

  }

  typedef level {
    type enumeration {
      enum "level-1" {
        description
          "This enum indicates L1-only capability.";
      }
      enum "level-2" {
        description
          "This enum indicates L2-only capability.";
      }
      enum "level-all" {
        description
          "This enum indicates capability for both levels.";
      }
    }
    default "level-all";
    description
      "This type defines IS-IS level of an object.";

  }

  typedef adj-state-type {
    type enumeration {
      enum "up" {
        description
          "State indicates the adjacency is established.";
      }
      enum "down" {
        description
          "State indicates the adjacency is NOT established.";
      }
      enum "init" {
        description
          "State indicates the adjacency is establishing.";
      }
      enum "failed" {
        description
          "State indicates the adjacency is failed.";
      }
    }
    description
      "This type defines states of an adjacency";
  }

  typedef if-state-type {
    type enumeration {
      enum "up" {
        description "Up state.";

      }
      enum "down" {
        description "Down state";
      }
    }
    description
      "This type defines the state of an interface";
  }

  typedef level-number {
    type uint8 {
      range "1 .. 2";
    }
    description
      "This type defines the current IS-IS level.";
  }

  typedef lsp-id {
    type string {
      pattern
        '[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]'
        +'{4}\.[0-9][0-9]-[0-9][0-9]';
    }
    description
      "This type defines the IS-IS LSP ID format using a
       pattern. An example LSP ID is 0143.0438.AEF0.02-01";
  }

  typedef area-address {
    type string {
      pattern '[0-9A-Fa-f]{2}(\.[0-9A-Fa-f]{4}){0,6}';
    }
    description
      "This type defines the area address format.";
  }

  typedef snpa {
    type string {
      length "0 .. 20";
    }
    description
      "This type defines the Subnetwork Point
       of Attachment (SNPA) format.
       The SNPA should be encoded according to the rules
       specified for the particular type of subnetwork
       being used. As an example, for an ethernet subnetwork,
       the SNPA is encoded as a MAC address like
       '00aa.bbcc.ddee'.";
  }

  typedef system-id {
    type string {
      pattern
        '[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}';
    }
    description
      "This type defines IS-IS system-id using pattern,
       An example system-id is 0143.0438.AEF0";
  }
  typedef extended-system-id {
    type string {
      pattern
        '[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.'
        +'[0-9][0-9]';
    }
    description
      "This type defines IS-IS system-id using pattern. The extended
       system-id contains the pseudonode number in addition to the
       system-id.
       An example system-id is 0143.0438.AEF0.00";
  }

  typedef wide-metric {
    type uint32 {
      range "0 .. 16777215";
    }
    description
      "This type defines wide style format of IS-IS metric.";
  }

  typedef std-metric {
    type uint8 {
      range "0 .. 63";
    }
    description
      "This type defines old style format of IS-IS metric.";
  }

  typedef mesh-group-state {
    type enumeration {
      enum "mesh-inactive" {
        description
          "Interface is not part of a mesh group.";
      }
      enum "mesh-set" {
        description
          "Interface is part of a mesh group.";
      }
      enum "mesh-blocked" {
        description
          "LSPs must not be flooded over this interface.";
      }
    }
    description
      "This type describes mesh group state of an interface";
  }

  /* Grouping for notifications */

  grouping notification-instance-hdr {
    description
      "Instance specific IS-IS notification data grouping";
    leaf routing-protocol-name {
      type leafref {
        path "/rt:routing/rt:control-plane-protocols/"
           + "rt:control-plane-protocol/rt:name";
      }
      description "Name of the IS-IS instance.";
    }
    leaf isis-level {
      type level;
      description "IS-IS level of the instance.";
    }
  }

  grouping notification-interface-hdr {
    description
      "Interface specific IS-IS notification data grouping";
    leaf interface-name {
      type if:interface-ref;
      description "IS-IS interface name";
    }
    leaf interface-level {
      type level;
      description "IS-IS level of the interface.";
    }
    leaf extended-circuit-id {
      type extended-circuit-id;
      description "Extended circuit-id of the interface.";
    }
  }


 /* Groupings for IP Fast Reroute */

 grouping instance-fast-reroute-config {
    description
      "This group defines global configuration of IP
       Fast ReRoute (FRR).";
    container fast-reroute {
      if-feature fast-reroute;
      description
        "This container may be augmented with global
         parameters for IP-FRR.";
      container lfa {
        if-feature lfa;
        description
          "This container may be augmented with
           global parameters for Loop-Free Alternatives (LFA).
           Container creation has no effect on LFA activation.";
      }
    }
  }

 grouping interface-lfa-config {
    leaf candidate-enable {
      type boolean;
      default "true";
      description
        "Enable the interface to be used as backup.";
    }
    leaf enable {
      type boolean;
      default false;
      description
        "Activates LFA - Per-prefix LFA computation
         is assumed.";
    }
    container remote-lfa {
      if-feature remote-lfa;
      leaf enable {
        type boolean;
        default false;
        description
          "Activates Remote LFA (R-LFA).";
      }
      description
        "Remote LFA configuration.";
    }
    description "Grouping for LFA interface configuration";
  }
  grouping interface-fast-reroute-config {
    description
      "This group defines interface configuration of IP-FRR.";
    container fast-reroute {
      if-feature fast-reroute;
      container lfa {
        if-feature lfa;
        uses interface-lfa-config;
        container level-1 {
          uses interface-lfa-config;
          description
            "LFA level 1 config";
        }
        container level-2 {
        uses interface-lfa-config;
         description
          "LFA level 2 config";
        }
        description
          "LFA configuration.";
      }
      description
        "Interface IP Fast-reroute configuration.";
    }
  }
  grouping instance-fast-reroute-state {
    description "IPFRR state data grouping";
    container protected-routes {
      config false;
      list address-family-stats {
        key "address-family prefix alternate";

        leaf address-family {
          type iana-rt-types:address-family;
          description
            "Address-family";
        }
        leaf prefix {
          type inet:ip-prefix;
          description
            "Protected prefix.";
        }
        leaf alternate {
          type inet:ip-address;
          description
            "Alternate next hop for the prefix.";
        }
        leaf alternate-type {
          type enumeration {
            enum equal-cost {
              description
                "ECMP alternate.";
            }
            enum lfa {
              description
                "LFA alternate.";
            }
            enum remote-lfa {
              description
                "Remote LFA alternate.";
            }
            enum tunnel {
              description
                "Tunnel based alternate
                 (like RSVP-TE or GRE).";
            }
            enum ti-lfa {
              description
                "TI-LFA alternate.";
            }
            enum mrt {
              description
                "MRT alternate.";
            }
            enum other {
              description
                "Unknown alternate type.";
            }
          }
          description
            "Type of alternate.";
        }
        leaf best {
          type boolean;
          description
            "Is set when the alternate is the preferred one,
             is unset otherwise.";
        }
        leaf non-best-reason {
          type string {
            length "1..255";
          }
          description
            "Information field to describe why the alternate
             is not best. The length should be limited to 255
             unicode characters. The expected format is a single
             line text.";
        }
        container protection-available {
          leaf-list protection-types {
            type identityref {
              base frr-protection-available-type;
            }
            description "This list contains a set of protection
                        types defined as identities.
                        An identity must be added for each type of
                        protection provided by the alternate.
                        As an example, if an alternate provides
                        SRLG, node and link protection, three
                        identities must be added in this list:
                        one for SRLG protection, one for node
                        protection, one for link protection.";
          }
          description "Protection types provided by the alternate.";
        }
        leaf alternate-metric1 {
          type uint32;
          description
            "Metric from Point of Local Repair (PLR) to
             destination through the alternate path.";
        }
        leaf alternate-metric2 {
          type uint32;
          description
            "Metric from PLR to the alternate node";
        }
        leaf alternate-metric3 {
          type uint32;
          description
            "Metric from alternate node to the destination";
        }
        description
          "Per-AF protected prefix statistics.";
      }
      description
        "List of prefixes that are protected.";
    }

    container unprotected-routes {
      config false;
      list address-family-stats {
        key "address-family prefix";

        leaf address-family {
          type iana-rt-types:address-family;

          description "Address-family";
        }
        leaf prefix {
          type inet:ip-prefix;
          description "Unprotected prefix.";
        }
        description
          "Per AF unprotected prefix statistics.";
      }
      description
        "List of prefixes that are not protected.";
    }

    list protection-statistics {
      key frr-protection-method;
      config false;
      leaf frr-protection-method {
        type identityref {
          base frr-protection-method;
        }
        description "Protection method used.";
      }
      list address-family-stats {
        key address-family;

        leaf address-family {
          type iana-rt-types:address-family;

          description "Address-family";
        }
        leaf total-routes {
          type uint32;
          description "Total prefixes.";
        }
        leaf unprotected-routes {
          type uint32;
          description
            "Total prefixes that are not protected.";
        }
        leaf protected-routes {
          type uint32;
          description
            "Total prefixes that are protected.";
        }
        leaf linkprotected-routes {
          type uint32;
          description
            "Total prefixes that are link protected.";
        }
        leaf nodeprotected-routes {
          type uint32;
          description
            "Total prefixes that are node protected.";
        }
        description
          "Per AF protected prefix statistics.";
      }

      description "Global protection statistics.";
    }
  }

        /* Route table and local RIB groupings */

  grouping local-rib {
    description "Local-rib - RIB for Routes computed by the local
                 IS-IS routing instance.";
    container local-rib {
      config false;
      description "Local-rib.";
      list route {
        key "prefix";
        description "Routes";
        leaf prefix {
          type inet:ip-prefix;
          description "Destination prefix.";
        }
        container next-hops {
          description "Next hops for the route.";
          list next-hop {
            key "next-hop";
            description "List of next hops for the route";
            leaf outgoing-interface {
              type if:interface-ref;
              description
                "Name of the outgoing interface.";
            }
            leaf next-hop {
             type inet:ip-address;
             description "Next hop address.";
            }
          }
        }
        leaf metric {
          type uint32;
          description "Metric for this route.";
        }
        leaf level {
          type level-number;
          description "Level number for this route.";
        }
        leaf route-tag {
          type uint32;
          description "Route tag for this route.";
        }
      }
    }
  }

  grouping route-content {
    description
      "IS-IS protocol-specific route properties grouping.";
    leaf metric {
      type uint32;
      description "IS-IS metric of a route.";
    }
    leaf-list tag {
      type uint64;
      description
        "List of tags associated with the route. The leaf
         describes both 32-bit and 64-bit tags.";
    }
    leaf route-type {
      type enumeration {
        enum l2-intra-area {
          description "Level 2 internal route. As per RFC2966,
                        the prefix is directly connected to the
                        advertising router. It cannot be
                        distinguished from an L1->L2 inter-area
                        route.";
        }
        enum l1-intra-area {
          description "Level 1 internal route. As per RFC2966,
                        the prefix is directly connected to the
                        advertising router.";
        }
        enum l2-external {
          description "Level 2 external route. As per RFC2966,
                        such a route is learned from other IGPs.
                        It cannot be distinguished from an L1->L2
                        inter-area external route.";
        }
        enum l1-external {
          description "Level 1 external route. As per RFC2966,
                        such a route is learned from other IGPs.";
        }
        enum l1-inter-area {
          description "These prefixes are learned via L2 routing.";
        }
        enum l1-inter-area-external {
          description "These prefixes are learned via L2 routing
                        towards an l2-external route.";
        }
      }
      description "IS-IS route type.";
    }
  }


        /* Grouping definitions for configuration and ops state */


  grouping adjacency-state {
    container adjacencies {
      config false;
      list adjacency {
        leaf neighbor-sys-type {
          type level;
          description
            "Level capability of neighboring system";
        }
        leaf neighbor-sysid {
          type system-id;
          description
            "The system-id of the neighbor";
        }
        leaf neighbor-extended-circuit-id {
          type extended-circuit-id;
          description
            "Circuit ID of the neighbor";
        }
        leaf neighbor-snpa {
          type snpa;
          description
            "SNPA of the neighbor";
        }
        leaf usage {
          type level;
          description
            "Define the level(s) activated on the adjacency.
             On a p2p link this might be level 1 and 2,
             but on a LAN, the usage will be level 1
             between peers at level 1 or level 2 between
             peers at level 2.";
        }
        leaf hold-timer {
          type rt-types:timer-value-seconds16;
          units seconds;
          description
            "The holding time in seconds for this
             adjacency. This value is based on
             received hello PDUs and the elapsed
             time since receipt.";
        }
        leaf neighbor-priority {
          type uint8 {
            range "0 .. 127";
          }
          description
            "Priority of the neighboring IS for becoming
             the DIS.";
        }
        leaf lastuptime {
          type yang:timestamp;
          description
            "When the adjacency most recently entered
             state 'up', measured in hundredths of a
             second since the last reinitialization of
             the network management subsystem.
             The value is 0 if the adjacency has never
             been in state 'up'.";
        }
        leaf state {
          type adj-state-type;
          description
            "This leaf describes the state of the interface.";
        }

        description
          "List of operational adjacencies.";
      }
      description
        "This container lists the adjacencies of
         the local node.";
    }
    description
      "Adjacency state";
  }

  grouping admin-control {
    leaf enable {
      if-feature admin-control;
      type boolean;
      default "true";
      description
        "Enable/Disable the protocol.";
    }
    description
      "Grouping for admin control.";
  }

  grouping ietf-spf-delay {
    leaf initial-delay {
      type rt-types:timer-value-milliseconds;
      units msec;
      description
        "Delay used while in QUIET state (milliseconds).";
    }
    leaf short-delay {
      type rt-types:timer-value-milliseconds;
      units msec;
      description
        "Delay used while in SHORT_WAIT state (milliseconds).";
    }
    leaf long-delay {
      type rt-types:timer-value-milliseconds;
      units msec;
      description
        "Delay used while in LONG_WAIT state (milliseconds).";
    }

    leaf hold-down {
      type rt-types:timer-value-milliseconds;
      units msec;
      description
        "Timer used to consider an IGP stability period
                                 (milliseconds).";
    }
    leaf time-to-learn {
      type rt-types:timer-value-milliseconds;
      units msec;
      description
        "Duration used to learn all the IGP events
         related to a single component failure (milliseconds).";
    }
    leaf current-state {
      type enumeration {
        enum "quiet" {
          description "QUIET state";
        }
        enum "short-wait" {
          description "SHORT_WAIT state";
        }
        enum "long-wait" {
          description "LONG_WAIT state";
        }
      }
      config false;
      description
        "Current SPF back-off algorithm state.";
    }
    leaf remaining-time-to-learn {
      type rt-types:timer-value-milliseconds;
      units "msec";
      config false;
      description
        "Remaining time until time-to-learn timer fires.";
    }
    leaf remaining-hold-down {
      type rt-types:timer-value-milliseconds;
      units "msec";
      config false;
      description
        "Remaining time until hold-down timer fires.";
    }
    leaf last-event-received {
      type yang:timestamp;
      config false;
      description
        "Time of last IGP event received";
    }
    leaf next-spf-time {
      type yang:timestamp;
      config false;
      description
        "Time when next SPF has been scheduled.";
    }
    leaf last-spf-time {
      type yang:timestamp;
      config false;
      description
        "Time of last SPF computation.";
    }
    description
      "Grouping for IETF SPF delay configuration and state.";
  }



  grouping node-tag-config {
    description
      "IS-IS node tag config state.";
    container node-tags {
      if-feature node-tag;
      list node-tag {
        key tag;
        leaf tag {
          type uint32;
            description
              "Node tag value.";
        }
        description
          "List of tags.";
      }
      description
        "Container for node admin tags.";
    }
  }

  grouping authentication-global-cfg {
    choice authentication-type {
      case key-chain {
        if-feature key-chain;
        leaf key-chain {
          type key-chain:key-chain-ref;
          description
            "Reference to a key-chain.";
        }
      }
      case password {
        leaf key {
          type string;
          description
            "This leaf specifies the authentication key. The
             length of the key may be dependent on the
             cryptographic algorithm.";
        }
        leaf crypto-algorithm {
          type identityref {
            base key-chain:crypto-algorithm;
          }
          description
            "Cryptographic algorithm associated with key.";
        }
      }
      description "Choice of authentication.";
    }
    description "Grouping for global authentication config.";
  }

  grouping metric-type-global-cfg {
    leaf value {
      type enumeration {
        enum wide-only {
          description
            "Advertise new metric style only (RFC5305)";
        }
        enum old-only {
          description
            "Advertise old metric style only (RFC1195)";
        }
        enum both {
          description "Advertise both metric styles";
        }
      }
      default wide-only;
      description
        "Type of metric to be generated:
         - wide-only means only new metric style
            is generated,
         - old-only means that only old-style metric
           is generated,
         - both means that both are advertised.
         This leaf is only affecting IPv4 metrics.";
    }
    description
      "Grouping for global metric style config.";
  }

  grouping default-metric-global-cfg {
    leaf value {
      type wide-metric;
      default "10";
      description  "Value of the metric";
    }
    description
      "Global default metric config grouping.";
  }


  grouping overload-global-cfg {
    leaf status {
      type boolean;
      default false;
      description
        "This leaf specifies the overload status.";
    }
    description "Grouping for overload bit config.";
  }

  grouping overload-max-metric-global-cfg {
    leaf timeout {
      type rt-types:timer-value-seconds16;
      units "seconds";
      description
        "Timeout (in seconds) of the overload condition.";
    }
    description
      "Overload maximum metric configuration grouping";
  }

  grouping route-preference-global-cfg {
    choice granularity {
      case detail {
        leaf internal {
          type uint8;
          description
            "Protocol preference for internal routes.";
        }
        leaf external {
          type uint8;
          description
            "Protocol preference for external routes.";
        }
      }
      case coarse {
        leaf default {
          type uint8;
          description
            "Protocol preference for all IS-IS routes.";
        }
      }
      description
        "Choice for implementation of route preference.";
    }
    description
      "Global route preference grouping";
  }

  grouping hello-authentication-cfg {
    choice authentication-type {
      case key-chain {
        if-feature key-chain;
        leaf key-chain {
          type key-chain:key-chain-ref;
          description "Reference to a key-chain.";
        }
      }
      case password {
        leaf key {
          type string;
          description "Authentication key specification - The
                       length of the key may be dependent on the
                       cryptographic algorithm.";
        }
        leaf crypto-algorithm {
          type identityref {
            base key-chain:crypto-algorithm;
          }
          description
            "Cryptographic algorithm associated with key.";
        }
      }
      description "Choice of authentication.";
    }
    description "Grouping for hello authentication.";
  }

  grouping hello-interval-cfg {
    leaf value {
      type rt-types:timer-value-seconds16;
      units "seconds";
      default 10;
      description
        "Interval (in seconds) between successive hello
         messages.";
    }

    description "Interval between hello messages.";
  }

  grouping hello-multiplier-cfg {
    leaf value {
      type uint16;
      default 3;
      description
        "Number of missed hello messages prior to
         declaring the adjacency down.";
    }
    description
        "Number of missed hello messages prior to
         adjacency down grouping.";
  }

  grouping priority-cfg {
    leaf value {
      type uint8 {
        range "0 .. 127";
      }
      default 64;
      description
        "Priority of interface for DIS election.";
    }

    description "Interface DIS election priority grouping";
  }

  grouping metric-cfg {
    leaf value {
      type wide-metric;
      default "10";
      description "Metric value.";
    }
    description "Interface metric grouping";
  }


  grouping metric-parameters {
    container metric-type {
      uses metric-type-global-cfg;
      container level-1 {
        uses metric-type-global-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses metric-type-global-cfg;
        description "level-2 specific configuration";
      }
      description "Metric style global configuration";
    }

    container default-metric {
      uses default-metric-global-cfg;
      container level-1 {
        uses default-metric-global-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses default-metric-global-cfg;
        description "level-2 specific configuration";
      }
      description "Default metric global configuration";
    }
    container auto-cost {
      if-feature auto-cost;
      description
        "Interface Auto-cost configuration state.";
      leaf enable {
        type boolean;
        description
          "Enable/Disable interface auto-cost.";
      }
      leaf reference-bandwidth {
        when "../enable = 'true'" {
          description "Only when auto cost is enabled";
        }
        type uint32 {
          range "1..4294967";
        }
        units Mbits;
        description
          "Configure reference bandwidth used to automatically
           determine interface cost (Mbits). The cost is the
           reference bandwidth divided by the interface speed
           with 1 being the minimum cost.";
      }
    }

    description "Grouping for global metric parameters.";
  }

  grouping high-availability-parameters {
    container graceful-restart {
      if-feature graceful-restart;
      leaf enable {
        type boolean;
        default false;
        description "Enable graceful restart.";
      }
      leaf restart-interval {
        type rt-types:timer-value-seconds16;
        units "seconds";
        description
          "Interval (in seconds) to attempt graceful restart prior
           to failure.";
      }
      leaf helper-enable {
        type boolean;
        default "true";
        description
          "Enable local IS-IS router as graceful restart helper.";
      }
      description "Graceful-Restart Configuration.";
    }
    container nsr {
      if-feature nsr;
      description "Non-Stop Routing (NSR) configuration.";
      leaf enable {
        type boolean;
        default false;
        description "Enable/Disable Non-Stop Routing (NSR).";
      }
    }
    description "Grouping for High Availability parameters.";
  }

  grouping authentication-parameters {
    container authentication {
      uses authentication-global-cfg;

      container level-1 {
        uses authentication-global-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses authentication-global-cfg;
        description "level-2 specific configuration";
      }
      description "Authentication global configuration for
                   both LSPs and SNPs.";
    }
    description "Grouping for authentication parameters";
  }
  grouping address-family-parameters {
    container address-families {
      if-feature nlpid-control;
      list address-family-list {
        key address-family;
        leaf address-family {
          type iana-rt-types:address-family;
          description "Address-family";
        }
        leaf enable {
          type boolean;
          description "Activate the address family.";
        }
        description
          "List of address families and whether or not they
           are activated.";
      }
      description "Address Family configuration";
    }
    description "Grouping for address family parameters.";
  }

  grouping mpls-parameters {
    container mpls {
      container te-rid {
        if-feature te-rid;
        description
          "Stable ISIS Router IP Address used for Traffic
           Engineering";
        leaf ipv4-router-id {
          type inet:ipv4-address;
          description
            "Router ID value that would be used in TLV 134.";
        }
        leaf ipv6-router-id {
          type inet:ipv6-address;
          description
            "Router ID value that would be used in TLV 140.";
        }
      }
      container ldp {
        container igp-sync {
          if-feature ldp-igp-sync;
          description
            "This container may be augmented with global
             parameters for igp-ldp-sync.";
        }
        description "LDP configuration.";
      }
      description "MPLS configuration";
    }
    description "Grouping for MPLS global parameters.";
  }

  grouping lsp-parameters {
    leaf lsp-mtu {
      type uint16;
      units "bytes";
      default 1492;
      description
        "Maximum size of an LSP PDU in bytes.";
    }
    leaf lsp-lifetime {
      type uint16 {
        range "1..65535";
      }
      units "seconds";
      description
        "Lifetime of the router's LSPs in seconds.";
    }
    leaf lsp-refresh {
      if-feature lsp-refresh;
      type rt-types:timer-value-seconds16;
      units "seconds";
      description
        "Refresh interval of the router's LSPs in seconds.";
    }
    leaf poi-tlv {
      if-feature poi-tlv;
      type boolean;
      default false;
      description
        "Enable advertisement of IS-IS purge TLV.";
    }
    description "Grouping for LSP global parameters.";
  }
  grouping spf-parameters {
    container spf-control {
        leaf paths {
          if-feature max-ecmp;
          type uint16 {
            range "1..32";
          }
          description
            "Maximum number of Equal-Cost Multi-Path (ECMP) paths.";
        }
        container ietf-spf-delay {
          if-feature ietf-spf-delay;
          uses ietf-spf-delay;
          description "IETF SPF delay algorithm configuration.";
        }
        description
          "SPF calculation control.";
    }
    description "Grouping for SPF global parameters.";
  }
  grouping instance-config {
    description "IS-IS global configuration grouping";

    uses admin-control;

    leaf level-type {
      type level;
      default "level-all";
      description
        "Level of an IS-IS node - can be level-1,
         level-2 or level-all.";
    }

    leaf system-id {
      type system-id;
      description "system-id of the node.";
    }

    leaf maximum-area-addresses {
      if-feature maximum-area-addresses;
      type uint8;
      default 3;
      description "Maximum areas supported.";
    }

    leaf-list area-address {
      type area-address;
      description
        "List of areas supported by the protocol instance.";
    }

    uses lsp-parameters;
    uses high-availability-parameters;
    uses node-tag-config;
    uses metric-parameters;
    uses authentication-parameters;
    uses address-family-parameters;
    uses mpls-parameters;
    uses spf-parameters;
    uses instance-fast-reroute-config;

    container preference {
      uses route-preference-global-cfg;
      description "Router preference configuration for IS-IS
                   protocol instance route installation";
    }

    container overload {
      uses overload-global-cfg;
      description "Router protocol instance overload state
                   configuration";
    }

    container overload-max-metric {
      if-feature overload-max-metric;
      uses overload-max-metric-global-cfg;
      description
        "Router protocol instance overload maximum
         metric advertisement configuration.";
    }
  }

  grouping instance-state {
      description
       "IS-IS instance operational state.";
      uses spf-log;
      uses lsp-log;
      uses hostname-db;
      uses lsdb;
      uses local-rib;
      uses system-counters;
      uses instance-fast-reroute-state;
      leaf discontinuity-time {
        type yang:date-and-time;
        description
          "The time on the most recent occasion at which any one
           or more of this IS-IS instance's counters suffered a
           discontinuity.  If no such discontinuities have occurred
           since the IS-IS instance was last re-initialized, then
           this node contains the time the IS-IS instance was
           re-initialized which normally occurs when it was
           created.";
      }
    description "System counters grouping.";
  }

  grouping multi-topology-config {
    description "Per-topology configuration";
    container default-metric {
      uses default-metric-global-cfg;
      container level-1 {
        uses default-metric-global-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses default-metric-global-cfg;
        description "level-2 specific configuration";
      }
      description "Default metric per-topology configuration";
    }
    uses node-tag-config;
  }

  grouping interface-config {
    description "Interface configuration grouping";

    uses admin-control;

    leaf level-type {
      type level;
      default "level-all";
      description "IS-IS level of the interface.";
    }
    leaf lsp-pacing-interval {
      type rt-types:timer-value-milliseconds;
      units "milliseconds";
      default 33;
      description
        "Interval (in milli-seconds) between LSP
         transmissions.";
    }
    leaf lsp-retransmit-interval {
      type rt-types:timer-value-seconds16;
      units "seconds";
      description
        "Interval (in seconds) between LSP
         retransmissions.";
    }
    leaf passive {
      type boolean;
      default "false";
      description
        "Indicates whether the interface is in passive mode (IS-IS
         not running but network is advertised).";
    }
    leaf csnp-interval {
      type rt-types:timer-value-seconds16;
      units "seconds";
      default 10;
      description
         "Interval (in seconds) between CSNP messages.";
    }
    container hello-padding {
      leaf enable {
        type boolean;
        default "true";
        description
          "IS-IS Hello-padding activation - enabled by default.";
      }
      description "IS-IS hello padding configuration.";
    }
    leaf mesh-group-enable {
      type mesh-group-state;
      description "IS-IS interface mesh-group state";
    }
    leaf mesh-group {
      when "../mesh-group-enable = 'mesh-set'" {
        description
          "Only valid when mesh-group-enable equals mesh-set";
      }
      type uint8;
      description "IS-IS interface mesh-group ID.";
    }
    leaf interface-type {
      type interface-type;
      default "broadcast";
      description
        "Type of adjacency to be established on the interface. This
         dictates the type of hello messages that are used.";
    }

    leaf-list tag {
      if-feature prefix-tag;
      type uint32;
      description
        "List of tags associated with the interface.";
    }
    leaf-list tag64 {
      if-feature prefix-tag64;
      type uint64;
      description
        "List of 64-bit tags associated with the interface.";
    }
    leaf node-flag {
      if-feature node-flag;
      type boolean;
      default false;
      description
        "Set prefix as a node representative prefix.";
    }
    container hello-authentication {
      uses hello-authentication-cfg;
      container level-1 {
        uses hello-authentication-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses hello-authentication-cfg;
        description "level-2 specific configuration";
      }
      description
        "Authentication type to be used in hello messages.";
    }
    container hello-interval {
      uses hello-interval-cfg;
      container level-1 {
        uses hello-interval-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses hello-interval-cfg;
        description "level-2 specific configuration";
      }
      description "Interval between hello messages.";
    }
    container hello-multiplier {
      uses hello-multiplier-cfg;
      container level-1 {
        uses hello-multiplier-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses hello-multiplier-cfg;
        description "level-2 specific configuration";
      }
      description "Hello multiplier configuration.";
    }
    container priority {
      must '../interface-type = "broadcast"' {
        error-message
          "Priority only applies to broadcast interfaces.";
        description "Check for broadcast interface.";
      }
      uses priority-cfg;
      container level-1 {
        uses priority-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses priority-cfg;
        description "level-2 specific configuration";
      }
      description "Priority for DIS election.";
    }
    container metric {
      uses metric-cfg;
      container level-1 {
        uses metric-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses metric-cfg;
        description "level-2 specific configuration";
      }
      description "Metric configuration.";
    }
    container bfd {
      if-feature bfd;
      description "BFD Client Configuration.";
      uses bfd-types:client-cfg-parms;

      reference "RFC YYYY - YANG Data Model for Bidirectional
               Forwarding Detection (BFD).

-- Note to RFC Editor Please replace YYYY with published FC
   number for draft-ietf-bfd-yang.";

    }
    container address-families {
      if-feature nlpid-control;
      list address-family-list {
        key address-family;
        leaf address-family {
          type iana-rt-types:address-family;
          description  "Address-family";
        }
        description "List of AFs.";
      }
      description "Interface address-families";
    }
    container mpls {
      container ldp {
        leaf igp-sync {
          if-feature ldp-igp-sync;
          type boolean;
          default false;
          description "Enables IGP/LDP synchronization";
        }
        description "LDP protocol related configuration.";
      }
      description "MPLS configuration for IS-IS interfaces";
    }
    uses interface-fast-reroute-config;
  }

  grouping multi-topology-interface-config {
    description "IS-IS interface topology configuration.";
    container metric {
      uses metric-cfg;
      container level-1 {
        uses metric-cfg;
        description "level-1 specific configuration";
      }
      container level-2 {
        uses metric-cfg;
        description "level-2 specific configuration";
      }
      description "Metric IS-IS interface configuration.";
    }
  }
  grouping interface-state {
    description
      "IS-IS interface operational state.";
    uses adjacency-state;
    uses event-counters;
    uses packet-counters;
    leaf discontinuity-time {
      type yang:date-and-time;
      description
        "The time on the most recent occasion at which any one
         or more of this IS-IS interfaces's counters suffered a
         discontinuity.  If no such discontinuities have occurred
         since the IS-IS interface was last re-initialized, then
         this node contains the time the IS-IS interface was
         re-initialized which normally occurs when it was
         created.";
      }
  }

 /* Grouping for the hostname database */

  grouping hostname-db {
    container hostnames {
      config false;
      list hostname {
        key system-id;
        leaf system-id {
          type system-id;
          description
            "system-id associated with the hostname.";
        }
        leaf hostname {
          type string {
            length "1..255";
          }
          description
            "Hostname associated with the system-id
             as defined in RFC5301.";
        }
        description
          "List of system-id/hostname associations.";
      }
      description
        "Hostname to system-id mapping database.";
    }
    description
      "Grouping for hostname to system-id mapping database.";
  }

  /* Groupings for counters */

  grouping system-counters {
    container system-counters {
      config false;
      list level {
        key level;

        leaf level {
          type level-number;
          description "IS-IS level.";
        }
        leaf corrupted-lsps {
          type uint32;
          description
            "Number of corrupted in-memory LSPs detected.
             LSPs received from the wire with a bad
             checksum are silently dropped and not counted.
             LSPs received from the wire with parse errors
             are counted by lsp-errors.";
        }
        leaf authentication-type-fails {
          type uint32;
          description
             "Number of authentication type mismatches.";
        }
        leaf authentication-fails {
          type uint32;
          description
            "Number of authentication key failures.";
        }
        leaf database-overload {
          type uint32;
          description
            "Number of times the database has become
             overloaded.";
        }
        leaf own-lsp-purge {
          type uint32;
          description
            "Number of times a zero-aged copy of the system's
             own LSP is received from some other IS-IS node.";
        }
        leaf manual-address-drop-from-area {
          type uint32;
          description
            "Number of times a manual address
             has been dropped from the area.";
        }
        leaf max-sequence {
          type uint32;
          description
            "Number of times the system has attempted
             to exceed the maximum sequence number.";
        }
        leaf sequence-number-skipped {
          type uint32;
          description
            "Number of times a sequence number skip has
             occurred.";
        }
        leaf id-len-mismatch {
          type uint32;
          description
            "Number of times a PDU is received with a
             different value for the ID field length
             than that of the receiving system.";
        }
        leaf partition-changes {
          type uint32;
          description
            "Number of partition changes detected.";
        }
        leaf lsp-errors {
          type uint32;
          description
            "Number of LSPs with errors we have received.";
        }
        leaf spf-runs {
          type uint32;
          description
            "Number of times we ran SPF at this level.";
        }
        description
          "List of supported levels.";
      }
      description
        "List counters for the IS-IS protocol instance";
    }
  }

  grouping event-counters {
    container event-counters {
      config false;
      leaf adjacency-changes {
        type uint32;
        description
          "The number of times an adjacency state change has
           occurred on this interface.";
      }
      leaf adjacency-number {
        type uint32;
        description
          "The number of adjacencies on this interface.";
      }
      leaf init-fails {
        type uint32;
        description
          "The number of times initialization of this
           interface has failed. This counts events such
           as PPP NCP failures. Failures to form an
           adjacency are counted by adjacency-rejects.";
      }
      leaf adjacency-rejects {
        type uint32;
        description
          "The number of times an adjacency has been
           rejected on this interface.";
      }
      leaf id-len-mismatch {
        type uint32;
        description
          "The number of times an IS-IS PDU with an ID
           field length different from that for this
           system has been received on this interface.";
      }
      leaf max-area-addresses-mismatch {
        type uint32;
        description
          "The number of times an IS-IS PDU has been
           received on this interface with the
           max area address field differing from that of
           this system.";
      }
      leaf authentication-type-fails {
        type uint32;
        description
          "Number of authentication type mismatches.";
      }
      leaf authentication-fails {
        type uint32;
        description
          "Number of authentication key failures.";
      }
      leaf lan-dis-changes {
        type uint32;
        description
          "The number of times the DIS has changed on this
           interface at this level. If the interface type is
           point-to-point, the count is zero.";
      }
      description "IS-IS interface event counters.";
    }
    description
      "Grouping for IS-IS interface event counters";
  }

  grouping packet-counters {
    container packet-counters {
      config false;
      list level {
        key level;

        leaf level {
          type level-number;
          description "IS-IS level.";
        }
        container iih {
          leaf in {
            type uint32;
            description "Received IIH PDUs.";
          }
          leaf out {
            type uint32;
            description "Sent IIH PDUs.";
          }
          description "Number of IIH PDUs received/sent.";
        }
        container ish {
          leaf in {
            type uint32;
            description "Received ISH PDUs.";
          }
          leaf out {
            type uint32;
            description "Sent ISH PDUs.";
          }
          description
            "ISH PDUs received/sent.";
        }
        container esh {
          leaf in {
            type uint32;
            description "Received ESH PDUs.";
          }
          leaf out {
            type uint32;
            description "Sent ESH PDUs.";
          }
          description "Number of ESH PDUs received/sent.";
        }
        container lsp {
          leaf in {
            type uint32;
            description "Received LSP PDUs.";
          }
          leaf out {
            type uint32;
            description "Sent LSP PDUs.";
          }
          description "Number of LSP PDUs received/sent.";
        }
        container psnp {
          leaf in {
            type uint32;
            description "Received PSNP PDUs.";
          }
          leaf out {
            type uint32;
            description "Sent PSNP PDUs.";
          }
          description "Number of PSNP PDUs received/sent.";
        }
        container csnp {
          leaf in {
            type uint32;
            description "Received CSNP PDUs.";
          }
          leaf out {
            type uint32;
            description "Sent CSNP PDUs.";
          }
          description "Number of CSNP PDUs received/sent.";
        }
        container unknown {
          leaf in {
            type uint32;
            description "Received unknown PDUs.";
          }
          description "Number of unknown PDUs received/sent.";
        }
        description
          "List of packet counter for supported levels.";
      }
      description "Packet counters per IS-IS level.";
    }
    description
      "Grouping for per IS-IS Level packet counters.";
  }

        /* Groupings for various log buffers */
  grouping spf-log {
    container spf-log {
      config false;
      list event {
        key id;

        leaf id {
          type uint32;
          description
            "Event identifier -  purely internal value.";
        }
        leaf spf-type {
          type enumeration {
            enum full {
              description "Full SPF computation.";
            }
            enum route-only {
              description
                "Route reachability only SPF computation";
            }
          }
          description "Type of SPF computation performed.";
        }
        leaf level {
          type level-number;
          description
            "IS-IS level number for SPF computation";
        }
        leaf schedule-timestamp {
          type yang:timestamp;
          description
            "Timestamp of when the SPF computation was
             scheduled.";
        }
        leaf start-timestamp {
          type yang:timestamp;
          description
            "Timestamp of when the SPF computation started.";
        }
        leaf end-timestamp {
          type yang:timestamp;
          description
            "Timestamp of when the SPF computation ended.";
        }
        list trigger-lsp {
          key "lsp";
          leaf lsp {
            type lsp-id;
            description
              "LSP ID of the LSP triggering SPF computation.";
          }
          leaf sequence {
            type uint32;
            description
              "Sequence number of the LSP triggering SPF
               computation";
          }
          description
            "This list includes the LSPs that triggered the
             SPF computation.";
        }
        description
          "List of computation events - implemented as a
           wrapping buffer.";
      }

      description
        "This container lists the SPF computation events.";
    }
    description "Grouping for spf-log events.";
  }

  grouping lsp-log {
    container lsp-log {
      config false;
      list event {
        key id;

        leaf id {
          type uint32;
          description
            "Event identifier -  purely internal value.";
        }
        leaf level {
          type level-number;
          description
            "IS-IS level number for LSP";
        }
        container lsp {
          leaf lsp {
            type lsp-id;
            description
              "LSP ID of the LSP.";
          }
          leaf sequence {
            type uint32;
            description
              "Sequence number of the LSP.";
          }
          description
            "LSP identification container - either the received
             LSP or the locally generated LSP.";
        }

        leaf received-timestamp {
          type yang:timestamp;
          description
            "This is the timestamp when the LSA was received.
             In case of local LSA update, the timestamp refers
             to the LSA origination time.";
        }

        leaf reason {
          type identityref {
            base lsp-log-reason;
          }
          description "Type of LSP change.";
        }

        description
          "List of LSP events - implemented as a
           wrapping buffer.";
      }

      description
        "This container lists the LSP log.
         Local LSP modifications are also included
         in the list.";

    } description "Grouping for LSP log.";
  }



  /* Groupings for the LSDB description */

  /* Unknown TLV and sub-TLV description */
  grouping tlv {
    description
      "Type-Length-Value (TLV)";
    leaf type {
      type uint16;
      description "TLV type.";
    }
    leaf length {
      type uint16;
      description "TLV length (octets).";
    }
    leaf value {
      type yang:hex-string;
      description "TLV value.";
    }
  }

  grouping unknown-tlvs {
    description
      "Unknown TLVs grouping - Used for unknown TLVs or
       unknown sub-TLVs.";
    container unknown-tlvs {
      description "All unknown TLVs.";
      list unknown-tlv {
        description "Unknown TLV.";
        uses tlv;
      }
    }
  }

  /* TLVs and sub-TLVs for prefixes */

  grouping prefix-reachability-attributes {
    description
      "Grouping for extended reachability attributes of an
       IPv4 or IPv6 prefix.";

    leaf external-prefix-flag {
      type boolean;
      description "External prefix flag.";
    }
    leaf readvertisement-flag {
      type boolean;
      description "Re-advertisement flag.";
    }
    leaf node-flag {
      type boolean;
      description "Node flag.";
    }
  }

  grouping prefix-ipv4-source-router-id {
    description
      "Grouping for the IPv4 source router ID of a prefix
       advertisement.";

    leaf ipv4-source-router-id {
      type inet:ipv4-address;
      description "IPv4 Source router ID address.";
    }
  }

  grouping prefix-ipv6-source-router-id {
    description
      "Grouping for the IPv6 source router ID of a prefix
       advertisement.";

    leaf ipv6-source-router-id {
      type inet:ipv6-address;
      description "IPv6 Source router ID address.";
    }
  }

  grouping prefix-attributes-extension {
    description "Prefix extended attributes
                 as defined in RFC7794.";

    uses prefix-reachability-attributes;
    uses prefix-ipv4-source-router-id;
    uses prefix-ipv6-source-router-id;
  }

  grouping prefix-ipv4-std {
    description
      "Grouping for attributes of an IPv4 standard prefix
       as defined in RFC1195.";
    leaf ip-prefix {
      type inet:ipv4-address;
      description "IPv4 prefix address";
    }
    leaf prefix-len {
      type uint8;
      description "IPv4 prefix length (in bits)";
    }
    leaf i-e {
      type boolean;
      description "Internal or External (I/E) Metric bit value.";
    }
    container default-metric {
      leaf metric {
        type std-metric;
        description "Default IS-IS metric for IPv4 prefix";
      }
      description "IS-IS default metric container.";
    }
    container delay-metric {
      leaf metric {
        type std-metric;
        description "IS-IS delay metric for IPv4 prefix";
      }
      leaf supported {
        type boolean;
        default "false";
        description
          "Indicates whether IS-IS delay metric is supported.";
      }
      description "IS-IS delay metric container.";
    }
    container expense-metric {
      leaf metric {
        type std-metric;
        description "IS-IS expense metric for IPv4 prefix";
      }
      leaf supported {
        type boolean;
        default "false";
        description
          "Indicates whether IS-IS delay metric is supported.";
      }
      description "IS-IS expense metric container.";
    }
    container error-metric {
      leaf metric {
        type std-metric;
        description
          "This leaf describes the IS-IS error metric value";
      }
      leaf supported {
        type boolean;
        default "false";
        description "IS-IS error metric for IPv4 prefix";
      }
      description "IS-IS error metric container.";
    }
  }

  grouping prefix-ipv4-extended {
    description
      "Grouping for attributes of an IPv4 extended prefix
       as defined in RFC5305.";
    leaf up-down {
      type boolean;
      description  "Value of up/down bit.";
    }
    leaf ip-prefix {
      type inet:ipv4-address;
      description "IPv4 prefix address";
    }
    leaf prefix-len {
      type uint8;
      description "IPv4 prefix length (in bits)";
    }
    leaf metric {
      type wide-metric;
      description "IS-IS wide metric value";
    }
    leaf-list tag {
      type uint32;
      description
        "List of 32-bit tags associated with the IPv4 prefix.";
    }
    leaf-list tag64 {
      type uint64;
      description
        "List of 32-bit tags associated with the IPv4 prefix.";
    }
    uses prefix-attributes-extension;
  }

  grouping prefix-ipv6-extended {
    description "Grouping for attributes of an IPv6 prefix
                 as defined in RFC5308.";
    leaf up-down {
      type boolean;
      description "Value of up/down bit.";
    }
    leaf ip-prefix {
      type inet:ipv6-address;
      description "IPv6 prefix address";
    }
    leaf prefix-len {
      type uint8;
      description  "IPv4 prefix length (in bits)";
    }
    leaf metric {
      type wide-metric;
      description  "IS-IS wide metric value";
    }
    leaf-list tag {
      type uint32;
      description
        "List of 32-bit tags associated with the IPv4 prefix.";
    }
    leaf-list tag64 {
      type uint64;
      description
        "List of 32-bit tags associated with the IPv4 prefix.";
    }
    uses prefix-attributes-extension;
  }

  /* TLVs and sub-TLVs for neighbors */

  grouping neighbor-link-attributes {
    description
      "Grouping for link attributes as defined
      in RFC5029";
    leaf link-attributes-flags {
      type uint16;
      description
        "Flags for the link attributes";
    }
  }
  grouping neighbor-gmpls-extensions {
    description
      "Grouping for GMPLS attributes of a neighbor as defined
      in RFC5307";
    leaf link-local-id {
      type uint32;
      description
        "Local identifier of the link.";
    }
    leaf remote-local-id {
      type uint32;
      description
        "Remote identifier of the link.";
    }
    leaf protection-capability {
      type uint8;
      description
        "Describes the protection capabilities
        of the link. This is the value of the
        first octet of the sub-TLV type 20 value.";
    }
    container interface-switching-capability {
      description
        "Interface switching capabilities of the link.";
      leaf switching-capability {
        type uint8;
        description
          "Switching capability of the link.";
      }
      leaf encoding {
        type uint8;
        description
          "Type of encoding of the LSP being used.";
      }
      container max-lsp-bandwidths {
        description "Per priority max LSP bandwidths.";
        list max-lsp-bandwidth {
          leaf priority {
            type uint8 {
              range "0 .. 7";
            }
            description "Priority from 0 to 7.";
          }
          leaf bandwidth {
            type rt-types:bandwidth-ieee-float32;
            description "max LSP bandwidth.";
          }
          description
            "List of max LSP bandwidths for different
             priorities.";
        }
      }
      container tdm-specific {
        when "../switching-capability = 100";
        description
          "Switching Capability-specific information applicable
          when switching type is TDM.";

        leaf minimum-lsp-bandwidth {
          type rt-types:bandwidth-ieee-float32;
          description "minimum LSP bandwidth.";
        }
        leaf indication {
          type uint8;
          description
            "The indication whether the interface supports Standard
            or Arbitrary SONET/SDH.";
        }
      }
      container psc-specific {
        when "../switching-capability >= 1 and
              ../switching-capability <= 4";
        description
          "Switching Capability-specific information applicable
          when switching type is PSC1,PSC2,PSC3 or PSC4.";

        leaf minimum-lsp-bandwidth {
          type rt-types:bandwidth-ieee-float32;
          description "minimum LSP bandwidth.";
        }
        leaf mtu {
          type uint16;
          units bytes;
          description
            "Interface MTU";
        }
      }
    }
  }

  grouping neighbor-extended-te-extensions {
    description
      "Grouping for TE attributes of a neighbor as defined
      in RFC8570";

    container unidirectional-link-delay {
      description
        "Container for the average delay
        from the local neighbor to the remote one.";
      container flags {
        leaf-list unidirectional-link-delay-subtlv-flags {
            type identityref {
                base unidirectional-link-delay-subtlv-flag;
            }
           description
                 "This list contains identities for the bits
                  which are set.";
        }
        description
          "unidirectional-link-delay subTLV flags.";
      }
      leaf value {
        type uint32;
        units usec;
        description
          "Delay value expressed in microseconds.";
      }
    }
    container min-max-unidirectional-link-delay {
      description
        "Container for the min and max delay
        from the local neighbor to the remote one.";
      container flags {
        leaf-list min-max-unidirectional-link-delay-subtlv-flags {
            type identityref {
                base min-max-unidirectional-link-delay-subtlv-flag;
            }
            description
                "This list contains identities for the bits which are
                set.";
        }
        description
          "min-max-unidirectional-link-delay subTLV flags.";
      }
      leaf min-value {
        type uint32;
        units usec;
        description
          "Minimum delay value expressed in microseconds.";
      }
      leaf max-value {
        type uint32;
        units usec;
        description
          "Maximum delay value expressed in microseconds.";
      }
    }
    container unidirectional-link-delay-variation {
      description
        "Container for the average delay variation
        from the local neighbor to the remote one.";
      leaf value {
        type uint32;
        units usec;
        description
          "Delay variation value expressed in microseconds.";
      }
    }
    container unidirectional-link-loss {
      description
        "Container for the packet loss
        from the local neighbor to the remote one.";
      container flags {
        leaf-list unidirectional-link-loss-subtlv-flags {
            type identityref {
                base unidirectional-link-loss-subtlv-flag;
            }
            description
                "This list contains identities for the bits which are
                set.";
        }
        description
          "unidirectional-link-loss subTLV flags.";
      }
      leaf value {
        type uint32;
        units percent;
        description
          "Link packet loss expressed as a percentage
          of the total traffic sent over a configurable interval.";
      }
    }
    container unidirectional-link-residual-bandwidth {
      description
        "Container for the residual bandwidth
        from the local neighbor to the remote one.";
      leaf value {
        type rt-types:bandwidth-ieee-float32;
        units Bps;
        description
          "Residual bandwidth.";
      }
    }
    container unidirectional-link-available-bandwidth {
      description
        "Container for the available bandwidth
        from the local neighbor to the remote one.";
      leaf value {
        type rt-types:bandwidth-ieee-float32;
        units Bps;
        description
          "Available bandwidth.";
      }
    }
    container unidirectional-link-utilized-bandwidth {
      description
        "Container for the utilized bandwidth
        from the local neighbor to the remote one.";
      leaf value {
        type rt-types:bandwidth-ieee-float32;
        units Bps;
        description
          "Utilized bandwidth.";
      }
    }
  }

  grouping neighbor-te-extensions {
    description
      "Grouping for TE attributes of a neighbor as defined
      in RFC5305";
    leaf admin-group {
      type uint32;
      description
        "Administrative group/Resource Class/Color.";
    }
    container local-if-ipv4-addrs {
      description "All local interface IPv4 addresses.";
      leaf-list local-if-ipv4-addr {
        type inet:ipv4-address;
        description
          "List of local interface IPv4 addresses.";
      }
    }
    container remote-if-ipv4-addrs {
      description "All remote interface IPv4 addresses.";
      leaf-list remote-if-ipv4-addr {
        type inet:ipv4-address;
        description
          "List of remote interface IPv4 addresses.";
      }
    }
    leaf te-metric {
      type uint32;
      description "TE metric.";
    }
    leaf max-bandwidth {
      type rt-types:bandwidth-ieee-float32;
      description "Maximum bandwidth.";
    }
    leaf max-reservable-bandwidth {
      type rt-types:bandwidth-ieee-float32;
      description "Maximum reservable bandwidth.";
    }
    container unreserved-bandwidths {
      description "All unreserved bandwidths.";
      list unreserved-bandwidth {
        leaf priority {
          type uint8 {
            range "0 .. 7";
          }
          description "Priority from 0 to 7.";
        }
        leaf unreserved-bandwidth {
          type rt-types:bandwidth-ieee-float32;
          description "Unreserved bandwidth.";
        }
        description
          "List of unreserved bandwidths for different
           priorities.";
      }
    }
  }

  grouping neighbor-extended {
    description
     "Grouping for attributes of an IS-IS extended neighbor.";
    leaf neighbor-id {
      type extended-system-id;
      description "system-id of the extended neighbor.";
    }
   container instances {
      description "List of all adjacencies between the local
                   system and the neighbor system-id.";
      list instance {
        key id;

        leaf id {
          type uint32;
          description "Unique identifier of an instance of a
                       particular neighbor.";
        }
        leaf metric {
          type wide-metric;
          description "IS-IS wide metric for extended neighbor";
        }
        uses neighbor-gmpls-extensions;
        uses neighbor-te-extensions;
        uses neighbor-extended-te-extensions;
        uses neighbor-link-attributes;
        uses unknown-tlvs;
        description "Instance of a particular adjacency.";
      }
    }
  }

  grouping neighbor {
    description  "IS-IS standard neighbor grouping.";
    leaf neighbor-id {
      type extended-system-id;
      description "IS-IS neighbor system-id";
    }
   container instances {
      description "List of all adjacencies between the local
                   system and the neighbor system-id.";
      list instance {
        key id;

        leaf id {
          type uint32;
          description "Unique identifier of an instance of a
                       particular neighbor.";
        }
        leaf i-e {
          type boolean;
          description
            "Internal or External (I/E) Metric bit value";
        }
        container default-metric {
          leaf metric {
            type std-metric;
            description "IS-IS default metric value";
          }
         description "IS-IS default metric container";
        }
        container delay-metric {
          leaf metric {
            type std-metric;
            description "IS-IS delay metric value";
          }
          leaf supported {
            type boolean;
            default "false";
            description "IS-IS delay metric supported";
          }
          description "IS-IS delay metric container";
        }
        container expense-metric {
          leaf metric {
            type std-metric;
            description "IS-IS delay expense metric value";
          }
          leaf supported {
            type boolean;
            default "false";
            description "IS-IS delay expense metric supported";
          }
          description "IS-IS delay expense metric container";
        }
        container error-metric {
          leaf metric {
            type std-metric;
            description "IS-IS error metric value";
          }
          leaf supported {
            type boolean;
            default "false";
            description "IS-IS error metric supported";
          }
          description "IS-IS error metric container";
        }
        description "Instance of a particular adjacency
                     as defined in ISO10589.";
      }
    }
  }

  /* Top-level TLVs */

  grouping tlv132-ipv4-addresses {
    leaf-list ipv4-addresses {
      type inet:ipv4-address;
      description
        "List of IPv4 addresses of the IS-IS node - IS-IS
         reference is TLV 132.";
    }
    description "Grouping for TLV132.";
  }
  grouping tlv232-ipv6-addresses {
    leaf-list ipv6-addresses {
      type inet:ipv6-address;
      description
        "List of IPv6 addresses of the IS-IS node - IS-IS
         reference is TLV 232.";
    }
    description "Grouping for TLV232.";
  }
  grouping tlv134-ipv4-te-rid {
    leaf ipv4-te-routerid {
      type inet:ipv4-address;
      description
        "IPv4 Traffic Engineering router ID of the IS-IS node -
         IS-IS reference is TLV 134.";
    }
    description "Grouping for TLV134.";
  }
  grouping tlv140-ipv6-te-rid {
    leaf ipv6-te-routerid {
      type inet:ipv6-address;
      description
        "IPv6 Traffic Engineering router ID of the IS-IS node -
         IS-IS reference is TLV 140.";
    }
    description "Grouping for TLV140.";
  }
  grouping tlv129-protocols {
    leaf-list protocol-supported {
      type uint8;
      description
      "List of supported protocols of the IS-IS node -
       IS-IS reference is TLV 129.";
    }
    description "Grouping for TLV129.";
  }
  grouping tlv137-hostname {
    leaf dynamic-hostname {
      type string;
      description
        "Host Name of the IS-IS node - IS-IS reference
         is TLV 137.";
    }
    description "Grouping for TLV137.";
  }
  grouping tlv10-authentication {
    container authentication {
      leaf authentication-type {
        type identityref {
            base key-chain:crypto-algorithm;
        }
        description
          "Authentication type to be used with IS-IS node.";
      }
      leaf authentication-key {
        type string;
        description
          "Authentication key to be used. For security reasons,
           the authentication key MUST NOT be presented in
           a clear text format in response to any request
          (e.g., via get, get-config).";
      }
      description
        "IS-IS node authentication information container -
         IS-IS reference is TLV 10.";
    }
    description "Grouping for TLV10.";
  }
  grouping tlv229-mt {
    container mt-entries {
      list topology {
        description
          "List of topologies supported";

        leaf mt-id {
          type uint16 {
            range "0 .. 4095";
          }
          description
            "Multi-Topology identifier of topology.";
        }
        container attributes {
            leaf-list flags {
                type identityref {
                    base tlv229-flag;
                }
                description
                "This list contains identities for the bits which are
                set.";
            }
            description
                "TLV 229 flags.";
        }
      }
      description
        "IS-IS node topology information container -
         IS-IS reference is TLV 229.";
    }
    description "Grouping for TLV229.";
  }

  grouping tlv242-router-capabilities {
    container router-capabilities {
      list router-capability {
          container flags {
            leaf-list router-capability-flags {
                type identityref {
                    base router-capability-flag;
                }
                description
                "This list contains identities for the bits which are
                set.";
            }
            description
                "Router capability flags.";
          }
          container node-tags {
            if-feature node-tag;
            list node-tag {
              leaf tag {
                type uint32;
                description "Node tag value.";
              }
              description "List of tags.";
            }
            description "Container for node admin tags";
          }

          uses unknown-tlvs;

          description
            "IS-IS node capabilities. This list element may
             be extended with detailed information -  IS-IS
             reference is TLV 242.";
        }
        description "List of router capability TLVs.";
      }
      description "Grouping for TLV242.";
  }

  grouping tlv138-srlg {
    description
      "Grouping for TLV138.";
    container links-srlgs {
      list links {
        leaf neighbor-id {
          type extended-system-id;
          description "system-id of the extended neighbor.";
        }
        leaf flags {
          type uint8;
          description
            "Flags associated with the link.";
        }
        leaf link-local-id {
          type union {
            type inet:ip-address;
            type uint32;
          }
          description
            "Local identifier of the link.
            It could be an IPv4 address or a local identifier.";
        }
        leaf link-remote-id {
          type union {
            type inet:ip-address;
            type uint32;
          }
          description
            "Remote identifier of the link.
            It could be an IPv4 address or a remotely learned
            identifier.";
        }
        container srlgs {
          description "List of SRLGs.";
          leaf-list srlg {
            type uint32;
            description
              "SRLG value of the link.";
          }
        }
        description
          "SRLG attribute of a link.";
      }
      description
        "List of links with SRLGs";
    }
  }

  /* Grouping for LSDB description */

  grouping lsp-entry {
    description "IS-IS LSP database entry grouping";

    leaf decoded-completed {
      type boolean;
      description "IS-IS LSP body fully decoded.";
    }
    leaf raw-data {
      type yang:hex-string;
      description
        "The hexadecimal representation of the complete LSP in
         network-byte order (NBO) as received or originated.";
    }
    leaf lsp-id {
      type lsp-id;
      description "LSP ID of the LSP";
    }
    leaf checksum {
      type uint16;
      description "LSP checksum";
    }
    leaf remaining-lifetime {
      type uint16;
      units "seconds";
      description
        "Remaining lifetime (in seconds) until LSP expiration.";
    }
    leaf sequence {
      type uint32;
      description
        "This leaf describes the sequence number of the LSP.";
    }
    container attributes {
        leaf-list lsp-flags {
            type identityref {
                base lsp-flag;
            }
            description
                "This list contains identities for the bits which are
                set.";
        }
        description "LSP attributes.";
    }

    uses tlv132-ipv4-addresses;
    uses tlv232-ipv6-addresses;
    uses tlv134-ipv4-te-rid;
    uses tlv140-ipv6-te-rid;
    uses tlv129-protocols;
    uses tlv137-hostname;
    uses tlv10-authentication;
    uses tlv229-mt;
    uses tlv242-router-capabilities;
    uses tlv138-srlg;
    uses unknown-tlvs;

    container is-neighbor {
      list neighbor {
        key neighbor-id;

        uses neighbor;
        description "List of neighbors.";
      }
      description
        "Standard IS neighbors container - IS-IS reference is
         TLV 2.";
    }

    container extended-is-neighbor {
      list neighbor {
        key neighbor-id;

        uses neighbor-extended;
        description
          "List of extended IS neighbors";
      }
      description
        "Standard IS extended neighbors container - IS-IS
         reference is TLV 22";
    }

    container ipv4-internal-reachability {
      list prefixes {
        uses prefix-ipv4-std;
        description "List of prefixes.";
      }
      description
      "IPv4 internal reachability information container - IS-IS
       reference is TLV 128.";
    }

    container ipv4-external-reachability {
      list prefixes {
        uses prefix-ipv4-std;
        description "List of prefixes.";
      }
      description
        "IPv4 external reachability information container -
         IS-IS reference is TLV 130.";
    }

    container extended-ipv4-reachability {
      list prefixes {
        uses prefix-ipv4-extended;
        uses unknown-tlvs;
        description "List of prefixes.";
      }
      description
        "IPv4 extended reachability information container -
         IS-IS reference is TLV 135.";
    }

    container mt-is-neighbor {
      list neighbor {
        leaf mt-id {
          type uint16 {
            range "0 .. 4095";
          }
          description "Multi-topology (MT) identifier";
        }
        uses neighbor-extended;
        description "List of neighbors.";
      }
      description
        "IS-IS multi-topology neighbor container - IS-IS
         reference is TLV 223.";
    }

    container mt-extended-ipv4-reachability {
      list prefixes {
        leaf mt-id {
          type uint16 {
            range "0 .. 4095";
          }
          description  "Multi-topology (MT) identifier";
        }
        uses prefix-ipv4-extended;
        uses unknown-tlvs;
        description "List of extended prefixes.";
      }
      description
        "IPv4 multi-topology (MT) extended reachability
         information container - IS-IS reference is TLV 235.";
    }

    container mt-ipv6-reachability {
      list prefixes {
        leaf MT-ID {
          type uint16 {
            range "0 .. 4095";
          }
          description "Multi-topology (MT) identifier";
        }
        uses prefix-ipv6-extended;
        uses unknown-tlvs;
        description "List of IPv6 extended prefixes.";
      }
      description
        "IPv6 multi-topology (MT) extended reachability
         information container - IS-IS reference is TLV 237.";
    }

    container ipv6-reachability {
      list prefixes {
        uses prefix-ipv6-extended;
        uses unknown-tlvs;
        description "List of IPv6 prefixes.";
      }
      description
        "IPv6 reachability information container - IS-IS
         reference is TLV 236.";
    }
  }

  grouping lsdb {
    description "Link State Database (LSDB) grouping";
    container database {
      config false;
      list levels {
        key level;

        leaf level {
          type level-number;
          description "LSDB level number (1 or 2)";
        }
        list lsp {
          key lsp-id;
          uses lsp-entry;
          description "List of LSPs in LSDB";
        }
        description "List of LSPs for the LSDB level container";
      }
      description "IS-IS Link State database container";
    }
  }




  /* Augmentations */

  augment "/rt:routing/"
    +"rt:ribs/rt:rib/rt:routes/rt:route" {
    when "rt:source-protocol = 'isis:isis'" {
      description "IS-IS-specific route attributes.";
    }
    uses route-content;
    description
      "This augments route object in RIB with IS-IS-specific
       attributes.";
  }


  augment "/if:interfaces/if:interface" {
    leaf clns-mtu {
      if-feature osi-interface;
      type uint16;
      description "CLNS MTU of the interface";
    }
    description "ISO specific interface parameters.";
  }

  augment "/rt:routing/rt:control-plane-protocols/"
    +"rt:control-plane-protocol" {
    when "rt:type = 'isis:isis'" {
      description
        "This augment is only valid when routing protocol
         instance type is 'isis'";
    }
    description
      "This augments a routing protocol instance with IS-IS
       specific parameters.";
    container isis {
      must "count(area-address) > 0" {
        error-message
          "At least one area-address must be configured.";
        description
          "Enforce configuration of at least one area.";
      }

      uses instance-config;
      uses instance-state;

      container topologies {
        if-feature multi-topology;
        list topology {
          key "name";
          leaf enable {
            type boolean;
            description "Topology enable configuration";
          }
          leaf name {
            type leafref {
              path "../../../../../../rt:ribs/rt:rib/rt:name";
            }
            description
              "Routing Information Base (RIB) corresponding
               to topology.";
          }

          uses multi-topology-config;

          description "List of topologies";
        }
        description "Multi-topology container";
      }
      container interfaces {
        list interface {
          key "name";
          leaf name {
            type if:interface-ref;

            description
              "Reference to the interface within
               the routing-instance.";
          }
          uses interface-config;
          uses interface-state;
          container topologies {
            if-feature multi-topology;
            list topology {
              key name;

              leaf name {
                type leafref {
                  path "../../../../../../../../"+
                    "rt:ribs/rt:rib/rt:name";
                }

                description
                  "Routing Information Base (RIB) corresponding
                   to topology.";
              }
              uses multi-topology-interface-config;
              description "List of interface topologies";
            }
            description "Multi-topology container";
          }
          description "List of IS-IS interfaces.";
        }
        description
          "IS-IS interface specific configuration container";
      }

      description
        "IS-IS configuration/state top-level container";
    }
  }


  /* RPC methods */

  rpc clear-adjacency {
    description
      "This RPC request clears a particular set of IS-IS
       adjacencies. If the operation fails due to an internal
       reason, then the error-tag and error-app-tag should be
       set indicating the reason for the failure.";
    input {

      leaf routing-protocol-instance-name {
        type leafref {
          path "/rt:routing/rt:control-plane-protocols/"
             + "rt:control-plane-protocol/rt:name";
        }
        mandatory "true";
        description
          "Name of the IS-IS protocol instance whose IS-IS
           adjacency is being cleared.

           If the corresponding IS-IS instance doesn't exist,
           then the operation will fail with an error-tag of
           'data-missing' and an error-app-tag of
           'routing-protocol-instance-not-found'.";
      }
      leaf level {
        type level;
        description
          "IS-IS level of the adjacency to be cleared. If the
           IS-IS level is level-1-2, both level 1 and level 2
           adjacencies would be cleared.

           If the value provided is different from the one
           authorized in the enum type, then the operation
           SHALL fail with an error-tag of 'data-missing' and
           an error-app-tag of 'bad-isis-level'.";
      }
      leaf interface {
        type if:interface-ref;
        description
          "IS-IS interface name.

           If the corresponding IS-IS interface doesn't exist,
           then the operation SHALL fail with an error-tag of
           'data-missing' and an error-app-tag of
           'isis-interface-not-found'.";
      }
    }
  }

  rpc clear-database {
    description
      "This RPC request clears a particular  IS-IS database. If
       the operation fails for an IS-IS internal reason, then
       the error-tag and error-app-tag should be set
       indicating the reason for the failure.";
    input {
      leaf routing-protocol-instance-name {
        type leafref {
          path "/rt:routing/rt:control-plane-protocols/"
             + "rt:control-plane-protocol/rt:name";
        }
        mandatory "true";
        description
          "Name of the IS-IS protocol instance whose IS-IS
           database(s) is/are being cleared.

           If the corresponding IS-IS instance doesn't exist,
           then the operation will fail with an error-tag of
           'data-missing' and an error-app-tag of
           'routing-protocol-instance-not-found'.";
      }
      leaf level {
        type level;
        description
          "IS-IS level of the adjacency to be cleared. If the
           IS-IS level is level-1-2, both level 1 and level 2
           databases would be cleared.

           If the value provided is different from the one
           authorized in the enum type, then the operation
           SHALL fail with an error-tag of 'data-missing' and
           an error-app-tag of 'bad-isis-level'.";
      }
    }
  }


  /* Notifications */

  notification database-overload {
    uses notification-instance-hdr;

    leaf overload {
      type enumeration {
        enum off {
          description
            "Indicates IS-IS instance has left overload state";
        }
        enum on {
          description
            "Indicates IS-IS instance has entered overload state";
        }

      }
      description "New overload state of the IS-IS instance";
    }
    description
      "This notification is sent when an IS-IS instance
       overload state changes.";
  }

  notification lsp-too-large {
    uses notification-instance-hdr;
    uses notification-interface-hdr;

    leaf pdu-size {
      type uint32;
      description "Size of the LSP PDU";
    }
    leaf lsp-id {
      type lsp-id;
      description "LSP ID";
    }
    description
      "This notification is sent when we attempt to propagate
       an LSP that is larger than the dataLinkBlockSize (ISO10589)
       for the circuit.  The notification generation must be
       throttled with at least 5 seconds between successive
       notifications.";
  }

  notification if-state-change {
    uses notification-instance-hdr;
    uses notification-interface-hdr;

    leaf state {
      type if-state-type;
      description "Interface state.";
    }
    description
      "This notification is sent when an interface
       state change is detected.";
  }

  notification corrupted-lsp-detected {
    uses notification-instance-hdr;
    leaf lsp-id {
      type lsp-id;
      description "LSP ID";
    }
    description
      "This notification is sent when we find that
       an LSP that was stored in memory has become
       corrupted.";
  }

  notification attempt-to-exceed-max-sequence {
    uses notification-instance-hdr;
    leaf lsp-id {
      type lsp-id;
      description "LSP ID";
    }
    description
      "This notification is sent when the system
       wraps the 32-bit sequence counter of an LSP.";
  }

  notification id-len-mismatch {
    uses notification-instance-hdr;
    uses notification-interface-hdr;

    leaf pdu-field-len {
      type uint8;
      description "Size of the ID length in the received PDU";
    }
    leaf raw-pdu {
      type binary;
      description "Received raw PDU.";
    }
    description
      "This notification is sent when we receive a PDU
       with a different value for the system-id length.
       The notification generation must be throttled
       with at least 5 seconds between successive
       notifications.";
  }

  notification max-area-addresses-mismatch {
    uses notification-instance-hdr;
    uses notification-interface-hdr;

    leaf max-area-addresses {
      type uint8;
      description "Received number of supported areas";
    }
    leaf raw-pdu {
      type binary;
      description "Received raw PDU.";
    }
    description
      "This notification is sent when we receive a PDU
       with a different value for the Maximum Area Addresses.
       The notification generation must be throttled
       with at least 5 seconds between successive
       notifications.";
  }

  notification own-lsp-purge {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf lsp-id {
      type lsp-id;
      description "LSP ID";
    }
    description
      "This notification is sent when the system receives
       a PDU with its own system-id and zero age.";
  }

  notification sequence-number-skipped {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf lsp-id {
      type lsp-id;
      description "LSP ID";
    }
    description
      "This notification is sent when the system receives a
       PDU with its own system-id and different contents. The
       system has to originate the LSP with a higher sequence
       number.";
  }

  notification authentication-type-failure {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf raw-pdu {
      type binary;
      description "Received raw PDU.";
    }
    description
      "This notification is sent when the system receives a
       PDU with the wrong authentication type field.
       The notification generation must be throttled
       with at least 5 seconds between successive
       notifications.";
  }

  notification authentication-failure {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf raw-pdu {
      type binary;
      description "Received raw PDU.";
    }
    description
      "This notification is sent when the system receives
       a PDU with the wrong authentication information.
       The notification generation must be throttled
       with at least 5 seconds between successive
       notifications.";
  }

  notification version-skew {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf protocol-version {
      type uint8;
      description "Protocol version received in the PDU.";
    }
    leaf raw-pdu {
      type binary;
      description "Received raw PDU.";
    }
    description
      "This notification is sent when the system receives a
       PDU with a different protocol version number.
       The notification generation must be throttled
       with at least 5 seconds between successive
       notifications.";
  }

  notification area-mismatch {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf raw-pdu {
      type binary;
      description "Received raw PDU.";
    }
    description
      "This notification is sent when the system receives a
       Hello PDU from an IS that does not share any area
       address. The notification generation must be throttled
       with at least 5 seconds between successive
       notifications.";
  }

  notification rejected-adjacency {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf raw-pdu {
      type binary;
      description
        "Received raw PDU.";
    }
    leaf reason {
      type string {
        length "1..255";
      }
      description
        "The system may provide a reason to reject the
         adjacency. If the reason is not available,
         an empty string will be returned.
         The expected format is a single line text.";
    }
    description
      "This notification is sent when the system receives a
       Hello PDU from an IS but does not establish an adjacency
       for some reason. The notification generation must be
       throttled with at least 5 seconds between successive
       notifications.";
  }


  notification protocols-supported-mismatch {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf raw-pdu {
      type binary;
      description "Received raw PDU.";
    }
    leaf-list protocols {
      type uint8;
      description
        "List of protocols supported by the remote system.";
    }
    description
      "This notification is sent when the system receives a
       non-pseudonode LSP that has no matching protocols
       supported. The notification generation must be throttled
       with at least 5 seconds between successive
       notifications.";
  }

  notification lsp-error-detected {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf lsp-id {
      type lsp-id;
      description "LSP ID.";
    }
    leaf raw-pdu {
      type binary;
      description "Received raw PDU.";
    }
    leaf error-offset {
      type uint32;
      description
        "If the problem is a malformed TLV, the error-offset
         points to the start of the TLV. If the problem is with
         the LSP header, the error-offset points to the errant
         byte";
    }
    leaf tlv-type {
      type uint8;
      description
        "If the problem is a malformed TLV, the tlv-type is set
         to the type value of the suspicious TLV. Otherwise,
         this leaf is not present.";
    }
    description
      "This notification is sent when the system receives an
       LSP with a parse error. The notification generation must
       be throttled with at least 5 seconds between successive
       notifications.";
  }

  notification adjacency-state-change {
    uses notification-instance-hdr;
    uses notification-interface-hdr;
    leaf neighbor {
      type string {
        length "1..255";
      }
      description
        "Name of the neighbor.
         It corresponds to the hostname associated
         with the system-id of the neighbor in the
         mapping database (RFC5301).
         If the name of the neighbor is
         not available, it is not returned.";
    }
    leaf neighbor-system-id {
      type system-id;
      description "Neighbor system-id";
    }
    leaf state {
      type adj-state-type;

      description "New state of the IS-IS adjacency.";
    }
    leaf reason {
      type string {
        length "1..255";
      }
      description
        "If the adjacency is going to DOWN,  this leaf provides
         a reason for the adjacency going down. The reason is
         provided as a text. If the adjacency is going to UP, no
         reason is provided. The expected format is a single line
         text.";
    }
    description
      "This notification is sent when an IS-IS adjacency
       moves to Up state or to Down state.";
  }

  notification lsp-received {
    uses notification-instance-hdr;
    uses notification-interface-hdr;

    leaf lsp-id {
      type lsp-id;
      description "LSP ID";
    }
    leaf sequence {
      type uint32;
      description "Sequence number of the received LSP.";
    }
    leaf received-timestamp {
      type yang:timestamp;

      description "Timestamp when the LSP was received.";
    }
    leaf neighbor-system-id {
      type system-id;
      description "Neighbor system-id of LSP sender";
    }
    description
      "This notification is sent when an LSP is received.
       The notification generation must be throttled with at
       least 5 seconds between successive notifications.";
   }

  notification lsp-generation {
    uses notification-instance-hdr;

    leaf lsp-id {
      type lsp-id;
      description "LSP ID";
    }
    leaf sequence {
      type uint32;
      description "Sequence number of the received LSP.";
    }
    leaf send-timestamp {
      type yang:timestamp;

      description "Timestamp when our LSP was regenerated.";
    }
    description
      "This notification is sent when an LSP is regenerated.
       The notification generation must be throttled with at
       least 5 seconds between successive notifications.";
  }
}
<CODE ENDS>
      ]]></artwork>
    </figure>

    </section>


    <section anchor="Security" title="Security Considerations" toc="default">
    <t>The YANG modules specified in this document define a schema for
       data that is designed to be accessed via network
       management protocols such as NETCONF <xref target="RFC6241"/> or
       RESTCONF <xref target="RFC8040"/>. The lowest NETCONF layer is the secure transport
       layer, and the mandatory-to-implement secure transport is Secure Shell (SSH)
       <xref target="RFC6242"/>. The lowest RESTCONF layer is HTTPS, and the
       mandatory-to-implement secure transport is TLS <xref target="RFC8446"/>.</t>

   <t>The NETCONF Access Control Model (NACM) <xref target="RFC8341"/> provides the
      means to restrict access for particular NETCONF or RESTCONF users to a
      pre-configured subset of all available NETCONF or RESTCONF protocol
      operations and content.</t>

   <t>There are a number of data nodes defined in ietf-isis.yang module that are
      writable/creatable/deletable (i.e., config true, which is the default).
      These data nodes may be considered sensitive or vulnerable in some network
      environments. Write operations (e.g., edit-config) to these data nodes without
      proper protection can have a negative effect on network operations.
      Writable data node represent configuration of each instanceand interface.
      These correspond to the following schema nodes:
      <list style="empty">
       <t>/isis</t>
       <t>/isis/interfaces/interface[name]</t>
      </list></t>
     <t>For OSPF,
      the ability to modify OSPF configuration will allow the entire OSPF domain
      to be compromised including peering with unauthorized routers to
      misroute traffic or mount a massive Denial-of-Service (DoS) attack. For example,
      adding OSPF on any unprotected interface could allow an OSPF adjacency to be
      formed with an unauthorized and malicious neighbor. Once an adjacency is formed,
      traffic could be hijacked. As a simpler example, a Denial-of-Service attack could
      be mounted by changing the cost of an OSPF interface to be asymmetric such that a
      hard routing loop ensues. In general, unauthorized modification of most OSPF features
      will pose  there own set of security risks and the "Security Considerations" in the
      respective reference RFCs should be consulted.</t>

   <t>Some of the readable data nodes in the ietf-isi.yang module may be considered
      sensitive or vulnerable in some network environments. It is thus
      important to control read access (e.g., via get, get-config, or notification)
      to these data nodes. The exposure of the Link State Database (LSDB) will
      expose the detailed topology of the network. The Link State Database (LSDB) is
      represented by the following schma nodes:
      <list style="empty">
       <t>/isis/database</t>
      </list></t>
    <t>Exposure of the Link State Database includes information beyond the scope of the
      OSPF router and this may be undesirable since exposure may facilitate other attacks.
      Additionally, in the case of an area LSDB, the complete IP network topology and,
      if deployed, the traffic engineering topology of the OSPF area can be
      reconstucted. Network operators may consider their topologies to be sensitive
      confidential data.</t>
    <t>For IS-IS authentication, configuration is supported via the specification of key-chain
       <xref target="RFC8177" pageno="false" format="default"/> or the direction specification
       of key and authentication algorithm. Hence, authentification
       configuration using the "auth-table-trailer" case in the
       "authentication" container inherits the security considerations of
       <xref target="RFC8177" pageno="false" format="default"/>. This includes the
        considerations with respect to the
        local storage and handling of authentication keys.</t> 

      <t>Some of the RPC operations in this YANG module may be considered sensitive or
         vulnerable in some network environments. It is thus important to control access
         to these operations. The IS-IS YANG module support the "clear-adjacency" and
         "clear-database" RPCs.  If access too either of these is compromised, they can
         result in temporary network outages be employed to mount DoS attacks.
        </t>
        <t>The actual authentication key data (whether locally specified or part
           of a key-chain) is sensitive and needs to be kept secret from
           unauthorized parties; compromise of the key data would allow an attacker to forge
           IS-IS traffic that would be accepted as authentic,
           potentially compromising the entirety IS-IS domain.</t>
       </section>

        <section anchor="Contributors" title="Contributors" toc="default">
      <t>Authors would like to thank 
          Kiran Agrahara Sreenivasa, Dean Bogdanovic, Yingzhen Qu, Yi Yang, Jeff Tanstura
          for their major contributions to the draft.</t>
    </section>

  <section anchor="IANA" title="IANA Considerations" toc="default">
        <t>The IANA is requested to assign two new URIs from the
   IETF XML registry <xref target="RFC3688" pageno="false" format="default"/>. Authors are suggesting the following URI: </t>
   <figure title="" suppress-title="false" align="left" alt="" width="" height="">
   <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
        URI: urn:ietf:params:xml:ns:yang:ietf-isis
        Registrant Contact: The IESG 
        XML: N/A, the requested URI is an XML namespace
   </artwork>
   </figure>
        <t>This document also requests one new YANG module name in the YANG Module Names registry <xref target="RFC6020" pageno="false" format="default"/> with the following suggestion:</t>
   <figure title="" suppress-title="false" align="left" alt="" width="" height="">
   <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
        name: ietf-isis
        namespace: urn:ietf:params:xml:ns:yang:ietf-isis
        prefix: isis
        reference: RFC XXXX
   </artwork>
   </figure>

    </section>

  </middle>
  <back>
    <references title="Normative References">


<reference anchor="RFC1195" target="https://www.rfc-editor.org/info/rfc1195">
<front>
<title>Use of OSI IS-IS for routing in TCP/IP and dual environments</title>
<author initials="R.W." surname="Callon" fullname="R.W. Callon"><organization/></author>
<date year="1990" month="December"/>
<abstract><t>This memo specifies an integrated routing protocol, based on the OSI Intra-Domain IS-IS Routing Protocol, which may be used as an interior gateway protocol (IGP) to support TCP/IP as well as OSI.  This allows a single routing protocol to be used to support pure IP environments, pure OSI environments, and dual environments.  This specification was developed by the IS-IS working group of the Internet Engineering Task Force.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="1195"/>
<seriesInfo name="DOI" value="10.17487/RFC1195"/>
</reference>



<reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials="S." surname="Bradner" fullname="S. Bradner"><organization/></author>
<date year="1997" month="March"/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name="BCP" value="14"/>
<seriesInfo name="RFC" value="2119"/>
<seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>



<reference anchor="RFC2966" target="https://www.rfc-editor.org/info/rfc2966">
<front>
<title>Domain-wide Prefix Distribution with Two-Level IS-IS</title>
<author initials="T." surname="Li" fullname="T. Li"><organization/></author>
<author initials="T." surname="Przygienda" fullname="T. Przygienda"><organization/></author>
<author initials="H." surname="Smit" fullname="H. Smit"><organization/></author>
<date year="2000" month="October"/>
<abstract><t>This document describes extensions to the Intermediate System to Intermediate System (IS-IS) protocol to support optimal routing within a two-level domain.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name="RFC" value="2966"/>
<seriesInfo name="DOI" value="10.17487/RFC2966"/>
</reference>



<reference anchor="RFC3688" target="https://www.rfc-editor.org/info/rfc3688">
<front>
<title>The IETF XML Registry</title>
<author initials="M." surname="Mealling" fullname="M. Mealling"><organization/></author>
<date year="2004" month="January"/>
<abstract><t>This document describes an IANA maintained registry for IETF standards which use Extensible Markup Language (XML) related items such as Namespaces, Document Type Declarations (DTDs), Schemas, and Resource Description Framework (RDF) Schemas.</t></abstract>
</front>
<seriesInfo name="BCP" value="81"/>
<seriesInfo name="RFC" value="3688"/>
<seriesInfo name="DOI" value="10.17487/RFC3688"/>
</reference>



<reference anchor="RFC4090" target="https://www.rfc-editor.org/info/rfc4090">
<front>
<title>Fast Reroute Extensions to RSVP-TE for LSP Tunnels</title>
<author initials="P." surname="Pan" fullname="P. Pan" role="editor"><organization/></author>
<author initials="G." surname="Swallow" fullname="G. Swallow" role="editor"><organization/></author>
<author initials="A." surname="Atlas" fullname="A. Atlas" role="editor"><organization/></author>
<date year="2005" month="May"/>
<abstract><t>This document defines RSVP-TE extensions to establish backup label-switched path (LSP) tunnels for local repair of LSP tunnels.  These mechanisms enable the re-direction of traffic onto backup LSP tunnels in 10s of milliseconds, in the event of a failure.</t><t>Two methods are defined here.  The one-to-one backup method creates detour LSPs for each protected LSP at each potential point of local repair.  The facility backup method creates a bypass tunnel to protect a potential failure point; by taking advantage of MPLS label stacking, this bypass tunnel can protect a set of LSPs that have similar backup constraints.  Both methods can be used to protect links and nodes during network failure.  The described behavior and extensions to RSVP allow nodes to implement either method or both and to interoperate in a mixed network.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="4090"/>
<seriesInfo name="DOI" value="10.17487/RFC4090"/>
</reference>



<reference anchor="RFC5029" target="https://www.rfc-editor.org/info/rfc5029">
<front>
<title>Definition of an IS-IS Link Attribute Sub-TLV</title>
<author initials="JP." surname="Vasseur" fullname="JP. Vasseur"><organization/></author>
<author initials="S." surname="Previdi" fullname="S. Previdi"><organization/></author>
<date year="2007" month="September"/>
<abstract><t>This document defines a sub-TLV called "Link-attributes" carried within the TLV 22 and used to flood some link characteristics.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5029"/>
<seriesInfo name="DOI" value="10.17487/RFC5029"/>
</reference>



<reference anchor="RFC5120" target="https://www.rfc-editor.org/info/rfc5120">
<front>
<title>M-ISIS: Multi Topology (MT) Routing in Intermediate System to Intermediate Systems (IS-ISs)</title>
<author initials="T." surname="Przygienda" fullname="T. Przygienda"><organization/></author>
<author initials="N." surname="Shen" fullname="N. Shen"><organization/></author>
<author initials="N." surname="Sheth" fullname="N. Sheth"><organization/></author>
<date year="2008" month="February"/>
<abstract><t>This document describes an optional mechanism within Intermediate System to Intermediate Systems (IS-ISs) used today by many ISPs for IGP routing within their clouds.  This document describes how to run, within a single IS-IS domain, a set of independent IP topologies that we call Multi-Topologies (MTs). This MT extension can be used for a variety of purposes, such as an in-band management network "on top" of the original IGP topology, maintaining separate IGP routing domains for isolated multicast or IPv6 islands within the backbone, or forcing a subset of an address space to follow a different topology.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5120"/>
<seriesInfo name="DOI" value="10.17487/RFC5120"/>
</reference>



<reference anchor="RFC5130" target="https://www.rfc-editor.org/info/rfc5130">
<front>
<title>A Policy Control Mechanism in IS-IS Using Administrative Tags</title>
<author initials="S." surname="Previdi" fullname="S. Previdi"><organization/></author>
<author initials="M." surname="Shand" fullname="M. Shand" role="editor"><organization/></author>
<author initials="C." surname="Martin" fullname="C. Martin"><organization/></author>
<date year="2008" month="February"/>
<abstract><t>This document describes an extension to the IS-IS protocol to add operational capabilities that allow for ease of management and control over IP prefix distribution within an IS-IS domain.  This document enhances the IS-IS protocol by extending the information that an Intermediate System (IS) router can place in Link State Protocol (LSP) Data Units for policy use.  This extension will provide operators with a mechanism to control IP prefix distribution throughout multi-level IS-IS domains.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5130"/>
<seriesInfo name="DOI" value="10.17487/RFC5130"/>
</reference>



<reference anchor="RFC5286" target="https://www.rfc-editor.org/info/rfc5286">
<front>
<title>Basic Specification for IP Fast Reroute: Loop-Free Alternates</title>
<author initials="A." surname="Atlas" fullname="A. Atlas" role="editor"><organization/></author>
<author initials="A." surname="Zinin" fullname="A. Zinin" role="editor"><organization/></author>
<date year="2008" month="September"/>
<abstract><t>This document describes the use of loop-free alternates to provide local protection for unicast traffic in pure IP and MPLS/LDP networks in the event of a single failure, whether link, node, or shared risk link group (SRLG).  The goal of this technology is to reduce the packet loss that happens while routers converge after a topology change due to a failure.  Rapid failure repair is achieved through use of precalculated backup next-hops that are loop-free and safe to use until the distributed network convergence process completes. This simple approach does not require any support from other routers. The extent to which this goal can be met by this specification is dependent on the topology of the network.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5286"/>
<seriesInfo name="DOI" value="10.17487/RFC5286"/>
</reference>



<reference anchor="RFC5301" target="https://www.rfc-editor.org/info/rfc5301">
<front>
<title>Dynamic Hostname Exchange Mechanism for IS-IS</title>
<author initials="D." surname="McPherson" fullname="D. McPherson"><organization/></author>
<author initials="N." surname="Shen" fullname="N. Shen"><organization/></author>
<date year="2008" month="October"/>
<abstract><t>RFC 2763 defined a simple and dynamic mechanism for routers running IS-IS to learn about symbolic hostnames.  RFC 2763 defined a new TLV that allows the IS-IS routers to flood their name-to-systemID mapping information across the IS-IS network.</t><t>This document obsoletes RFC 2763.  This document moves the capability provided by RFC 2763 to the Standards Track.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5301"/>
<seriesInfo name="DOI" value="10.17487/RFC5301"/>
</reference>



<reference anchor="RFC5305" target="https://www.rfc-editor.org/info/rfc5305">
<front>
<title>IS-IS Extensions for Traffic Engineering</title>
<author initials="T." surname="Li" fullname="T. Li"><organization/></author>
<author initials="H." surname="Smit" fullname="H. Smit"><organization/></author>
<date year="2008" month="October"/>
<abstract><t>This document describes extensions to the Intermediate System to Intermediate System (IS-IS) protocol to support Traffic Engineering (TE).  This document extends the IS-IS protocol by specifying new information that an Intermediate System (router) can place in Link State Protocol Data Units (LSP).  This information describes additional details regarding the state of the network that are useful for traffic engineering computations.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5305"/>
<seriesInfo name="DOI" value="10.17487/RFC5305"/>
</reference>



<reference anchor="RFC5306" target="https://www.rfc-editor.org/info/rfc5306">
<front>
<title>Restart Signaling for IS-IS</title>
<author initials="M." surname="Shand" fullname="M. Shand"><organization/></author>
<author initials="L." surname="Ginsberg" fullname="L. Ginsberg"><organization/></author>
<date year="2008" month="October"/>
<abstract><t>This document describes a mechanism for a restarting router to signal to its neighbors that it is restarting, allowing them to reestablish their adjacencies without cycling through the down state, while still correctly initiating database synchronization.</t><t>This document additionally describes a mechanism for a restarting router to determine when it has achieved Link State Protocol Data Unit (LSP) database synchronization with its neighbors and a mechanism to optimize LSP database synchronization, while minimizing transient routing disruption when a router starts.  This document obsoletes RFC 3847.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5306"/>
<seriesInfo name="DOI" value="10.17487/RFC5306"/>
</reference>



<reference anchor="RFC5307" target="https://www.rfc-editor.org/info/rfc5307">
<front>
<title>IS-IS Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS)</title>
<author initials="K." surname="Kompella" fullname="K. Kompella" role="editor"><organization/></author>
<author initials="Y." surname="Rekhter" fullname="Y. Rekhter" role="editor"><organization/></author>
<date year="2008" month="October"/>
<abstract><t>This document specifies encoding of extensions to the IS-IS routing protocol in support of Generalized Multi-Protocol Label Switching (GMPLS).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5307"/>
<seriesInfo name="DOI" value="10.17487/RFC5307"/>
</reference>



<reference anchor="RFC5308" target="https://www.rfc-editor.org/info/rfc5308">
<front>
<title>Routing IPv6 with IS-IS</title>
<author initials="C." surname="Hopps" fullname="C. Hopps"><organization/></author>
<date year="2008" month="October"/>
<abstract><t>This document specifies a method for exchanging IPv6 routing information using the IS-IS routing protocol.  The described method utilizes two new TLVs: a reachability TLV and an interface address TLV to distribute the necessary IPv6 information throughout a routing domain.  Using this method, one can route IPv6 along with IPv4 and OSI using a single intra-domain routing protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5308"/>
<seriesInfo name="DOI" value="10.17487/RFC5308"/>
</reference>



<reference anchor="RFC5443" target="https://www.rfc-editor.org/info/rfc5443">
<front>
<title>LDP IGP Synchronization</title>
<author initials="M." surname="Jork" fullname="M. Jork"><organization/></author>
<author initials="A." surname="Atlas" fullname="A. Atlas"><organization/></author>
<author initials="L." surname="Fang" fullname="L. Fang"><organization/></author>
<date year="2009" month="March"/>
<abstract><t>In certain networks, there is dependency on the edge-to-edge Label Switched Paths (LSPs) setup by the Label Distribution Protocol (LDP), e.g., networks that are used for Multiprotocol Label Switching (MPLS) Virtual Private Network (VPN) applications.  For such applications, it is not possible to rely on Internet Protocol (IP) forwarding if the MPLS LSP is not operating appropriately. Blackholing of labeled traffic can occur in situations where the Interior Gateway Protocol (IGP) is operational on a link on which LDP is not.  While the link could still be used for IP forwarding, it is not useful for MPLS forwarding, for example, MPLS VPN applications or Border Gateway Protocol (BGP) route-free cores.  This document describes a mechanism to avoid traffic loss due to this condition without introducing any protocol changes.  This memo provides  information for the Internet community.</t></abstract>
</front>
<seriesInfo name="RFC" value="5443"/>
<seriesInfo name="DOI" value="10.17487/RFC5443"/>
</reference>



<reference anchor="RFC5880" target="https://www.rfc-editor.org/info/rfc5880">
<front>
<title>Bidirectional Forwarding Detection (BFD)</title>
<author initials="D." surname="Katz" fullname="D. Katz"><organization/></author>
<author initials="D." surname="Ward" fullname="D. Ward"><organization/></author>
<date year="2010" month="June"/>
<abstract><t>This document describes a protocol intended to detect faults in the bidirectional path between two forwarding engines, including interfaces, data link(s), and to the extent possible the forwarding engines themselves, with potentially very low latency.  It operates independently of media, data protocols, and routing protocols. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5880"/>
<seriesInfo name="DOI" value="10.17487/RFC5880"/>
</reference>



<reference anchor="RFC5881" target="https://www.rfc-editor.org/info/rfc5881">
<front>
<title>Bidirectional Forwarding Detection (BFD) for IPv4 and IPv6 (Single Hop)</title>
<author initials="D." surname="Katz" fullname="D. Katz"><organization/></author>
<author initials="D." surname="Ward" fullname="D. Ward"><organization/></author>
<date year="2010" month="June"/>
<abstract><t>This document describes the use of the Bidirectional Forwarding Detection (BFD) protocol over IPv4 and IPv6 for single IP hops. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="5881"/>
<seriesInfo name="DOI" value="10.17487/RFC5881"/>
</reference>



<reference anchor="RFC6020" target="https://www.rfc-editor.org/info/rfc6020">
<front>
<title>YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)</title>
<author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor"><organization/></author>
<date year="2010" month="October"/>
<abstract><t>YANG is a data modeling language used to model configuration and state data manipulated by the Network Configuration Protocol (NETCONF), NETCONF remote procedure calls, and NETCONF notifications. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="6020"/>
<seriesInfo name="DOI" value="10.17487/RFC6020"/>
</reference>



<reference anchor="RFC6119" target="https://www.rfc-editor.org/info/rfc6119">
<front>
<title>IPv6 Traffic Engineering in IS-IS</title>
<author initials="J." surname="Harrison" fullname="J. Harrison"><organization/></author>
<author initials="J." surname="Berger" fullname="J. Berger"><organization/></author>
<author initials="M." surname="Bartlett" fullname="M. Bartlett"><organization/></author>
<date year="2011" month="February"/>
<abstract><t>This document specifies a method for exchanging IPv6 traffic  engineering information using the IS-IS routing protocol. This information enables routers in an IS-IS network to  calculate traffic-engineered routes using IPv6 addresses. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="6119"/>
<seriesInfo name="DOI" value="10.17487/RFC6119"/>
</reference>



<reference anchor="RFC6232" target="https://www.rfc-editor.org/info/rfc6232">
<front>
<title>Purge Originator Identification TLV for IS-IS</title>
<author initials="F." surname="Wei" fullname="F. Wei"><organization/></author>
<author initials="Y." surname="Qin" fullname="Y. Qin"><organization/></author>
<author initials="Z." surname="Li" fullname="Z. Li"><organization/></author>
<author initials="T." surname="Li" fullname="T. Li"><organization/></author>
<author initials="J." surname="Dong" fullname="J. Dong"><organization/></author>
<date year="2011" month="May"/>
<abstract><t>At present, an IS-IS purge does not contain any information identifying the Intermediate System (IS) that generates the purge. This makes it difficult to locate the source IS.</t><t>To address this issue, this document defines a TLV to be added to purges to record the system ID of the IS generating it.  Since normal Link State Protocol Data Unit (LSP) flooding does not change LSP contents, this TLV should propagate with the purge.</t><t>This document updates RFC 5301, RFC 5304, and RFC 5310.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="6232"/>
<seriesInfo name="DOI" value="10.17487/RFC6232"/>
</reference>



<reference anchor="RFC6241" target="https://www.rfc-editor.org/info/rfc6241">
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author initials="R." surname="Enns" fullname="R. Enns" role="editor"><organization/></author>
<author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor"><organization/></author>
<author initials="J." surname="Schoenwaelder" fullname="J. Schoenwaelder" role="editor"><organization/></author>
<author initials="A." surname="Bierman" fullname="A. Bierman" role="editor"><organization/></author>
<date year="2011" month="June"/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="6241"/>
<seriesInfo name="DOI" value="10.17487/RFC6241"/>
</reference>



<reference anchor="RFC6242" target="https://www.rfc-editor.org/info/rfc6242">
<front>
<title>Using the NETCONF Protocol over Secure Shell (SSH)</title>
<author initials="M." surname="Wasserman" fullname="M. Wasserman"><organization/></author>
<date year="2011" month="June"/>
<abstract><t>This document describes a method for invoking and running the Network Configuration Protocol (NETCONF) within a Secure Shell (SSH) session as an SSH subsystem.  This document obsoletes RFC 4742.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="6242"/>
<seriesInfo name="DOI" value="10.17487/RFC6242"/>
</reference>



<reference anchor="RFC6991" target="https://www.rfc-editor.org/info/rfc6991">
<front>
<title>Common YANG Data Types</title>
<author initials="J." surname="Schoenwaelder" fullname="J. Schoenwaelder" role="editor"><organization/></author>
<date year="2013" month="July"/>
<abstract><t>This document introduces a collection of common data types to be used with the YANG data modeling language.  This document obsoletes RFC 6021.</t></abstract>
</front>
<seriesInfo name="RFC" value="6991"/>
<seriesInfo name="DOI" value="10.17487/RFC6991"/>
</reference>



<reference anchor="RFC7490" target="https://www.rfc-editor.org/info/rfc7490">
<front>
<title>Remote Loop-Free Alternate (LFA) Fast Reroute (FRR)</title>
<author initials="S." surname="Bryant" fullname="S. Bryant"><organization/></author>
<author initials="C." surname="Filsfils" fullname="C. Filsfils"><organization/></author>
<author initials="S." surname="Previdi" fullname="S. Previdi"><organization/></author>
<author initials="M." surname="Shand" fullname="M. Shand"><organization/></author>
<author initials="N." surname="So" fullname="N. So"><organization/></author>
<date year="2015" month="April"/>
<abstract><t>This document describes an extension to the basic IP fast reroute mechanism, described in RFC 5286, that provides additional backup connectivity for point-to-point link failures when none can be provided by the basic mechanisms.</t></abstract>
</front>
<seriesInfo name="RFC" value="7490"/>
<seriesInfo name="DOI" value="10.17487/RFC7490"/>
</reference>



<reference anchor="RFC7794" target="https://www.rfc-editor.org/info/rfc7794">
<front>
<title>IS-IS Prefix Attributes for Extended IPv4 and IPv6 Reachability</title>
<author initials="L." surname="Ginsberg" fullname="L. Ginsberg" role="editor"><organization/></author>
<author initials="B." surname="Decraene" fullname="B. Decraene"><organization/></author>
<author initials="S." surname="Previdi" fullname="S. Previdi"><organization/></author>
<author initials="X." surname="Xu" fullname="X. Xu"><organization/></author>
<author initials="U." surname="Chunduri" fullname="U. Chunduri"><organization/></author>
<date year="2016" month="March"/>
<abstract><t>This document introduces new sub-TLVs to support advertisement of IPv4 and IPv6 prefix attribute flags and the source router ID of the router that originated a prefix advertisement.</t></abstract>
</front>
<seriesInfo name="RFC" value="7794"/>
<seriesInfo name="DOI" value="10.17487/RFC7794"/>
</reference>



<reference anchor="RFC7917" target="https://www.rfc-editor.org/info/rfc7917">
<front>
<title>Advertising Node Administrative Tags in IS-IS</title>
<author initials="P." surname="Sarkar" fullname="P. Sarkar" role="editor"><organization/></author>
<author initials="H." surname="Gredler" fullname="H. Gredler"><organization/></author>
<author initials="S." surname="Hegde" fullname="S. Hegde"><organization/></author>
<author initials="S." surname="Litkowski" fullname="S. Litkowski"><organization/></author>
<author initials="B." surname="Decraene" fullname="B. Decraene"><organization/></author>
<date year="2016" month="July"/>
<abstract><t>This document describes an extension to the IS-IS routing protocol to advertise node administrative tags.  This optional capability allows tagging and grouping of the nodes in an IS-IS domain.  The node administrative tags can be used to express and apply locally defined network policies, thereby providing a very useful operational capability.  Node administrative tags may be used by either IS-IS itself or other applications consuming information propagated via IS-IS.</t></abstract>
</front>
<seriesInfo name="RFC" value="7917"/>
<seriesInfo name="DOI" value="10.17487/RFC7917"/>
</reference>



<reference anchor="RFC7950" target="https://www.rfc-editor.org/info/rfc7950">
<front>
<title>The YANG 1.1 Data Modeling Language</title>
<author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor"><organization/></author>
<date year="2016" month="August"/>
<abstract><t>YANG is a data modeling language used to model configuration data, state data, Remote Procedure Calls, and notifications for network management protocols.  This document describes the syntax and semantics of version 1.1 of the YANG language.  YANG version 1.1 is a maintenance release of the YANG language, addressing ambiguities and defects in the original specification.  There are a small number of backward incompatibilities from YANG version 1.  This document also specifies the YANG mappings to the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name="RFC" value="7950"/>
<seriesInfo name="DOI" value="10.17487/RFC7950"/>
</reference>



<reference anchor="RFC7981" target="https://www.rfc-editor.org/info/rfc7981">
<front>
<title>IS-IS Extensions for Advertising Router Information</title>
<author initials="L." surname="Ginsberg" fullname="L. Ginsberg"><organization/></author>
<author initials="S." surname="Previdi" fullname="S. Previdi"><organization/></author>
<author initials="M." surname="Chen" fullname="M. Chen"><organization/></author>
<date year="2016" month="October"/>
<abstract><t>This document defines a new optional Intermediate System to Intermediate System (IS-IS) TLV named CAPABILITY, formed of multiple sub-TLVs, which allows a router to announce its capabilities within an IS-IS level or the entire routing domain.  This document obsoletes RFC 4971.</t></abstract>
</front>
<seriesInfo name="RFC" value="7981"/>
<seriesInfo name="DOI" value="10.17487/RFC7981"/>
</reference>



<reference anchor="RFC8040" target="https://www.rfc-editor.org/info/rfc8040">
<front>
<title>RESTCONF Protocol</title>
<author initials="A." surname="Bierman" fullname="A. Bierman"><organization/></author>
<author initials="M." surname="Bjorklund" fullname="M. Bjorklund"><organization/></author>
<author initials="K." surname="Watsen" fullname="K. Watsen"><organization/></author>
<date year="2017" month="January"/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name="RFC" value="8040"/>
<seriesInfo name="DOI" value="10.17487/RFC8040"/>
</reference>



<reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials="B." surname="Leiba" fullname="B. Leiba"><organization/></author>
<date year="2017" month="May"/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name="BCP" value="14"/>
<seriesInfo name="RFC" value="8174"/>
<seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>



<reference anchor="RFC8294" target="https://www.rfc-editor.org/info/rfc8294">
<front>
<title>Common YANG Data Types for the Routing Area</title>
<author initials="X." surname="Liu" fullname="X. Liu"><organization/></author>
<author initials="Y." surname="Qu" fullname="Y. Qu"><organization/></author>
<author initials="A." surname="Lindem" fullname="A. Lindem"><organization/></author>
<author initials="C." surname="Hopps" fullname="C. Hopps"><organization/></author>
<author initials="L." surname="Berger" fullname="L. Berger"><organization/></author>
<date year="2017" month="December"/>
<abstract><t>This document defines a collection of common data types using the YANG data modeling language.  These derived common types are designed to be imported by other modules defined in the routing area.</t></abstract>
</front>
<seriesInfo name="RFC" value="8294"/>
<seriesInfo name="DOI" value="10.17487/RFC8294"/>
</reference>



<reference anchor="RFC8341" target="https://www.rfc-editor.org/info/rfc8341">
<front>
<title>Network Configuration Access Control Model</title>
<author initials="A." surname="Bierman" fullname="A. Bierman"><organization/></author>
<author initials="M." surname="Bjorklund" fullname="M. Bjorklund"><organization/></author>
<date year="2018" month="March"/>
<abstract><t>The standardization of network configuration interfaces for use with the Network Configuration Protocol (NETCONF) or the RESTCONF protocol requires a structured and secure operating environment that promotes human usability and multi-vendor interoperability.  There is a need for standard mechanisms to restrict NETCONF or RESTCONF protocol access for particular users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.  This document defines such an access control model.</t><t>This document obsoletes RFC 6536.</t></abstract>
</front>
<seriesInfo name="STD" value="91"/>
<seriesInfo name="RFC" value="8341"/>
<seriesInfo name="DOI" value="10.17487/RFC8341"/>
</reference>



<reference anchor="RFC8342" target="https://www.rfc-editor.org/info/rfc8342">
<front>
<title>Network Management Datastore Architecture (NMDA)</title>
<author initials="M." surname="Bjorklund" fullname="M. Bjorklund"><organization/></author>
<author initials="J." surname="Schoenwaelder" fullname="J. Schoenwaelder"><organization/></author>
<author initials="P." surname="Shafer" fullname="P. Shafer"><organization/></author>
<author initials="K." surname="Watsen" fullname="K. Watsen"><organization/></author>
<author initials="R." surname="Wilton" fullname="R. Wilton"><organization/></author>
<date year="2018" month="March"/>
<abstract><t>Datastores are a fundamental concept binding the data models written in the YANG data modeling language to network management protocols such as the Network Configuration Protocol (NETCONF) and RESTCONF. This document defines an architectural framework for datastores based on the experience gained with the initial simpler model, addressing requirements that were not well supported in the initial model.  This document updates RFC 7950.</t></abstract>
</front>
<seriesInfo name="RFC" value="8342"/>
<seriesInfo name="DOI" value="10.17487/RFC8342"/>
</reference>



<reference anchor="RFC8343" target="https://www.rfc-editor.org/info/rfc8343">
<front>
<title>A YANG Data Model for Interface Management</title>
<author initials="M." surname="Bjorklund" fullname="M. Bjorklund"><organization/></author>
<date year="2018" month="March"/>
<abstract><t>This document defines a YANG data model for the management of network interfaces.  It is expected that interface-type-specific data models augment the generic interfaces data model defined in this document. The data model includes definitions for configuration and system state (status information and counters for the collection of statistics).</t><t>The YANG data model in this document conforms to the Network Management Datastore Architecture (NMDA) defined in RFC 8342.</t><t>This document obsoletes RFC 7223.</t></abstract>
</front>
<seriesInfo name="RFC" value="8343"/>
<seriesInfo name="DOI" value="10.17487/RFC8343"/>
</reference>



<reference anchor="RFC8349" target="https://www.rfc-editor.org/info/rfc8349">
<front>
<title>A YANG Data Model for Routing Management (NMDA Version)</title>
<author initials="L." surname="Lhotka" fullname="L. Lhotka"><organization/></author>
<author initials="A." surname="Lindem" fullname="A. Lindem"><organization/></author>
<author initials="Y." surname="Qu" fullname="Y. Qu"><organization/></author>
<date year="2018" month="March"/>
<abstract><t>This document specifies three YANG modules and one submodule. Together, they form the core routing data model that serves as a framework for configuring and managing a routing subsystem.  It is expected that these modules will be augmented by additional YANG modules defining data models for control-plane protocols, route filters, and other functions.  The core routing data model provides common building blocks for such extensions -- routes, Routing Information Bases (RIBs), and control-plane protocols.</t><t>The YANG modules in this document conform to the Network Management Datastore Architecture (NMDA).  This document obsoletes RFC 8022.</t></abstract>
</front>
<seriesInfo name="RFC" value="8349"/>
<seriesInfo name="DOI" value="10.17487/RFC8349"/>
</reference>



<reference anchor="RFC8177" target="https://www.rfc-editor.org/info/rfc8177">
<front>
<title>YANG Data Model for Key Chains</title>
<author initials="A." surname="Lindem" fullname="A. Lindem" role="editor"><organization/></author>
<author initials="Y." surname="Qu" fullname="Y. Qu"><organization/></author>
<author initials="D." surname="Yeung" fullname="D. Yeung"><organization/></author>
<author initials="I." surname="Chen" fullname="I. Chen"><organization/></author>
<author initials="J." surname="Zhang" fullname="J. Zhang"><organization/></author>
<date year="2017" month="June"/>
<abstract><t>This document describes the key chain YANG data model.  Key chains are commonly used for routing protocol authentication and other applications requiring symmetric keys.  A key chain is a list containing one or more elements containing a Key ID, key string, send/accept lifetimes, and the associated authentication or encryption algorithm.  By properly overlapping the send and accept lifetimes of multiple key chain elements, key strings and algorithms may be gracefully updated.  By representing them in a YANG data model, key distribution can be automated.</t></abstract>
</front>
<seriesInfo name="RFC" value="8177"/>
<seriesInfo name="DOI" value="10.17487/RFC8177"/>
</reference>



<reference anchor="I-D.ietf-bfd-yang">
<front>
<title>YANG Data Model for Bidirectional Forwarding Detection (BFD)</title>

<author initials="R" surname="Rahman" fullname="Reshad Rahman">
    <organization/>
</author>

<author initials="L" surname="Zheng" fullname="Lianshu Zheng">
    <organization/>
</author>

<author initials="M" surname="Jethanandani" fullname="Mahesh Jethanandani">
    <organization/>
</author>

<author initials="J" surname="Networks" fullname="Juniper Networks">
    <organization/>
</author>

<author initials="G" surname="Mirsky" fullname="Gregory Mirsky">
    <organization/>
</author>

<date month="August" day="2" year="2018"/>

<abstract><t>This document defines a YANG data model that can be used to configure and manage Bidirectional Forwarding Detection (BFD).  The YANG modules in this document conform to the Network Management Datastore Architecture (NMDA).</t></abstract>

</front>

<seriesInfo name="Internet-Draft" value="draft-ietf-bfd-yang-17"/>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-bfd-yang-17.txt"/>
</reference>



<reference anchor="RFC8405" target="https://www.rfc-editor.org/info/rfc8405">
<front>
<title>Shortest Path First (SPF) Back-Off Delay Algorithm for Link-State IGPs</title>
<author initials="B." surname="Decraene" fullname="B. Decraene"><organization/></author>
<author initials="S." surname="Litkowski" fullname="S. Litkowski"><organization/></author>
<author initials="H." surname="Gredler" fullname="H. Gredler"><organization/></author>
<author initials="A." surname="Lindem" fullname="A. Lindem"><organization/></author>
<author initials="P." surname="Francois" fullname="P. Francois"><organization/></author>
<author initials="C." surname="Bowers" fullname="C. Bowers"><organization/></author>
<date year="2018" month="June"/>
<abstract><t>This document defines a standard algorithm to temporarily postpone or "back off" link-state IGP Shortest Path First (SPF) computations. This reduces the computational load and churn on IGP nodes when multiple temporally close network events trigger multiple SPF computations.</t><t>Having one standard algorithm improves interoperability by reducing the probability and/or duration of transient forwarding loops during the IGP convergence when the IGP reacts to multiple temporally close IGP events.</t></abstract>
</front>
<seriesInfo name="RFC" value="8405"/>
<seriesInfo name="DOI" value="10.17487/RFC8405"/>
</reference>



<reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
<author initials="E." surname="Rescorla" fullname="E. Rescorla"><organization/></author>
<date year="2018" month="August"/>
<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t><t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t></abstract>
</front>
<seriesInfo name="RFC" value="8446"/>
<seriesInfo name="DOI" value="10.17487/RFC8446"/>
</reference>



<reference anchor="RFC8570" target="https://www.rfc-editor.org/info/rfc8570">
<front>
<title>IS-IS Traffic Engineering (TE) Metric Extensions</title>
<author initials="L." surname="Ginsberg" fullname="L. Ginsberg" role="editor"><organization/></author>
<author initials="S." surname="Previdi" fullname="S. Previdi" role="editor"><organization/></author>
<author initials="S." surname="Giacalone" fullname="S. Giacalone"><organization/></author>
<author initials="D." surname="Ward" fullname="D. Ward"><organization/></author>
<author initials="J." surname="Drake" fullname="J. Drake"><organization/></author>
<author initials="Q." surname="Wu" fullname="Q. Wu"><organization/></author>
<date year="2019" month="March"/>
<abstract><t>In certain networks, such as, but not limited to, financial information networks (e.g., stock market data providers), network-performance criteria (e.g., latency) are becoming as critical to data-path selection as other metrics.</t><t>This document describes extensions to IS-IS Traffic Engineering Extensions (RFC 5305).  These extensions provide a way to distribute and collect network-performance information in a scalable fashion. The information distributed using IS-IS TE Metric Extensions can then be used to make path-selection decisions based on network performance.</t><t>Note that this document only covers the mechanisms with which network-performance information is distributed.  The mechanisms for measuring network performance or acting on that information, once distributed, are outside the scope of this document.</t><t>This document obsoletes RFC 7810.</t></abstract>
</front>
<seriesInfo name="RFC" value="8570"/>
<seriesInfo name="DOI" value="10.17487/RFC8570"/>
</reference>

     <reference anchor="ISO-10589">
      <front>
        <title>Intermediate System to Intermediate System intra-
               domain routeing information exchange protocol for use in
               conjunction with the protocol for providing the
               connectionless-mode network service (ISO 8473)</title>
        <author surname="ISO"/>
        <date year="2002"/>
      </front>
      <seriesInfo name="International Standard 10589: 2002," value="Second Edition"/> 
     </reference>
    </references>
    <references title="Informative References">
      

<reference anchor="RFC8340" target="https://www.rfc-editor.org/info/rfc8340">
<front>
<title>YANG Tree Diagrams</title>
<author initials="M." surname="Bjorklund" fullname="M. Bjorklund"><organization/></author>
<author initials="L." surname="Berger" fullname="L. Berger" role="editor"><organization/></author>
<date year="2018" month="March"/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name="BCP" value="215"/>
<seriesInfo name="RFC" value="8340"/>
<seriesInfo name="DOI" value="10.17487/RFC8340"/>
</reference>

    </references>
    <section anchor="rpc-example" title="Example of IS-IS configuration in XML" toc="default">
      <t>This section gives an example of configuration of an IS-IS instance on a device.
          The example is written in XML.</t>

      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;data xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"&gt;
  &lt;routing xmlns="urn:ietf:params:xml:ns:yang:ietf-routing"&gt;
      &lt;name&gt;SLI&lt;/name&gt;
      &lt;router-id&gt;1.1.1.1&lt;/router-id&gt;
      &lt;control-plane-protocols&gt;
        &lt;control-plane-protocol&gt;
          &lt;name&gt;ISIS-example&lt;/name&gt;
          &lt;description/&gt;
          &lt;type&gt;
            &lt;type xmlns:isis="urn:ietf:params:xml:ns:yang:ietf-isis"&gt;
            isis:isis
            &lt;/type&gt;
          &lt;/type&gt;
          &lt;isis xmlns="urn:ietf:params:xml:ns:yang:ietf-isis"&gt;
              &lt;enable&gt;true&lt;/enable&gt;
              &lt;level-type&gt;level-2&lt;/level-type&gt;
              &lt;system-id&gt;87FC.FCDF.4432&lt;/system-id&gt;
              &lt;area-address&gt;49.0001&lt;/area-address&gt;
              &lt;mpls&gt;
                &lt;te-rid&gt;
                  &lt;ipv4-router-id&gt;192.0.2.1&lt;/ipv4-router-id&gt;
                &lt;/te-rid&gt;
              &lt;/mpls&gt;
              &lt;lsp-lifetime&gt;65535&lt;/lsp-lifetime&gt;
              &lt;lsp-refresh&gt;65000&lt;/lsp-refresh&gt;
              &lt;metric-type&gt;
                &lt;value&gt;wide-only&lt;/value&gt;
              &lt;/metric-type&gt;
              &lt;default-metric&gt;
                &lt;value&gt;111111&lt;/value&gt;
              &lt;/default-metric&gt;
              &lt;address-families&gt;
                &lt;address-family-list&gt;
                  &lt;address-family&gt;ipv4&lt;/address-family&gt;
                  &lt;enable&gt;true&lt;/enable&gt;
                &lt;/address-family-list&gt;
                &lt;address-family-list&gt;
                  &lt;address-family&gt;ipv6&lt;/address-family&gt;
                  &lt;enable&gt;true&lt;/enable&gt;
                &lt;/address-family-list&gt;
              &lt;/address-families&gt;
              &lt;interfaces&gt;
                &lt;interface&gt;
                  &lt;name&gt;Loopback0&lt;/name&gt;
                  &lt;tag&gt;200&lt;/tag&gt;
                  &lt;metric&gt;
                    &lt;value&gt;0&lt;/value&gt;
                  &lt;/metric&gt;
                  &lt;passive&gt;true&lt;/passive&gt;
                &lt;/interface&gt;
                &lt;interface&gt;
                  &lt;name&gt;Eth1&lt;/name&gt;
                  &lt;level-type&gt;level-2&lt;/level-type&gt;
                  &lt;interface-type&gt;point-to-point&lt;/interface-type&gt;
                  &lt;metric&gt;
                    &lt;value&gt;167890&lt;/value&gt;
                  &lt;/metric&gt;
                &lt;/interface&gt;
              &lt;/interfaces&gt;
          &lt;/isis&gt;
        &lt;/control-plane-protocol&gt;
      &lt;/control-plane-protocols&gt;
  &lt;/routing&gt;
  &lt;interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"&gt;
    &lt;interface&gt;
      &lt;name&gt;Loopback0&lt;/name&gt;
      &lt;description/&gt;
      &lt;type xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type"&gt;
      ianaift:softwareLoopback
      &lt;/type&gt;
      &lt;link-up-down-trap-enable&gt;enabled&lt;/link-up-down-trap-enable&gt;
      &lt;ipv4 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip"&gt;
        &lt;address&gt;
          &lt;ip&gt;192.0.2.1&lt;/ip&gt;
          &lt;prefix-length&gt;32&lt;/prefix-length&gt;
        &lt;/address&gt;
      &lt;/ipv4&gt;
      &lt;ipv6 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip"&gt;
        &lt;address&gt;
          &lt;ip&gt;2001:DB8::1&lt;/ip&gt;
          &lt;prefix-length&gt;128&lt;/prefix-length&gt;
        &lt;/address&gt;
      &lt;/ipv6&gt;
    &lt;/interface&gt;
    &lt;interface&gt;
      &lt;name&gt;Eth1&lt;/name&gt;
      &lt;description/&gt;
      &lt;type xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type"&gt;
      ianaift:ethernetCsmacd
      &lt;/type&gt;
      &lt;link-up-down-trap-enable&gt;enabled&lt;/link-up-down-trap-enable&gt;
      &lt;ipv4 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip"&gt;
        &lt;address&gt;
          &lt;ip&gt;198.51.100.1&lt;/ip&gt;
          &lt;prefix-length&gt;30&lt;/prefix-length&gt;
        &lt;/address&gt;
      &lt;/ipv4&gt;
      &lt;ipv6 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip"&gt;
        &lt;address&gt;
          &lt;ip&gt;2001:DB8:0:0:FF::1&lt;/ip&gt;
          &lt;prefix-length&gt;64&lt;/prefix-length&gt;
        &lt;/address&gt;
      &lt;/ipv6&gt;
    &lt;/interface&gt;
  &lt;/interfaces&gt;
&lt;/data&gt;
</artwork>

      </figure>

    </section>
  </back>
</rfc>
